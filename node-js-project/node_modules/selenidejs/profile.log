FUNCTION  <SNR>10_deleteExtraBuffers()
    Defined: ~/.config/nvim/plugins/session.vim line 107
Called 8 times
Total time:   0.004637
 Self time:   0.003081

count  total (s)   self (s)
    8   0.001615   0.000059   let bufferIds = s:buflisted_sorted()
    8              0.000019   if len(bufferIds) < s:buffers_to_keep
                                return
    8              0.000005   endif
    8              0.000021   let buffers_to_close = bufferIds[s:buffers_to_keep:]
   12              0.000018   for buffer in buffers_to_close
    4              0.002909     silent exe 'bdel ' . buffer
   12              0.000012   endfor

FUNCTION  <SNR>43_on_async_response()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim line 178
Called 6 times
Total time:   0.004818
 Self time:   0.000213

count  total (s)   self (s)
    6              0.000029   let Callback = get(self.async_callbacks, a:id, v:null)
    6              0.000013   if empty(Callback)
                                " should not happen
                                echohl Error | echom 'callback not found' | echohl None
                                return
    6              0.000003   endif
    6              0.000021   call remove(self.async_callbacks, a:id)
    6              0.000005   if a:isErr
                                call call(Callback, [a:resp, v:null])
    6              0.000004   else
    6   0.004684   0.000079     call call(Callback, [v:null, a:resp])
    6              0.000003   endif

FUNCTION  airline#extensions#quickfix#inactive_qf_window()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim line 28
Called 10 times
Total time:   0.000112
 Self time:   0.000112

count  total (s)   self (s)
   10              0.000074   if getbufvar(a:2.bufnr, '&filetype') is# 'qf' && !empty(airline#util#getwinvar(a:2.winnr, 'quickfix_title', ''))
                                call setwinvar(a:2.winnr, 'airline_section_c', '[%{get(w:, "quickfix_title", "")}] %f %m')
   10              0.000006   endif

FUNCTION  airline#extensions#vista#currenttag()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/vista.vim line 10
Called 157 times
Total time:   0.001095
 Self time:   0.001095

count  total (s)   self (s)
  157              0.000481   if get(w:, 'airline_active', 0)
  145              0.000465     return get(b:, 'vista_nearest_method_or_function', '')
   12              0.000005   endif

FUNCTION  coc#client#get_channel()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim line 98
Called 66 times
Total time:   0.000494
 Self time:   0.000494

count  total (s)   self (s)
   66              0.000121   if s:is_vim
                                return a:client['channel']
   66              0.000036   endif
   66              0.000118   return a:client['chan_id']

FUNCTION  8()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 51
Called 288 times
Total time:   0.002741
 Self time:   0.002741

count  total (s)   self (s)
  288              0.001737   let sub = deepcopy(self)
  288              0.000726   return a:0 ? extend(sub,a:1) : sub

FUNCTION  9()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 233
Called 288 times
Total time:   5.698016
 Self time:   0.005741

count  total (s)   self (s)
  288   5.697867   0.005593   return self.clone().go(a:bang,a:line1,a:line2,a:count,a:args)

FUNCTION  GetProjectNameFromPath()
    Defined: ~/.config/nvim/plugins/session.vim line 32
Called 8 times
Total time:   0.002719
 Self time:   0.002719

count  total (s)   self (s)
    8              0.002325   let b:projectpath = finddir('.git/..', expand('%:p:h').';')
    8              0.000264   let b:rawprojectpath = split(b:projectpath, '/')[-1]
    8              0.000072   let b:projectname = substitute(b:rawprojectpath, "\\.", "", "")
    8              0.000018   return b:projectname

FUNCTION  airline#util#exec_funcrefs()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 93
Called 17 times
Total time:   0.017612
 Self time:   0.001687

count  total (s)   self (s)
   89              0.000130     for Fn in a:list
   89   0.017193   0.001268       let code = call(Fn, a:000)
   89              0.000089       if code != 0
   17              0.000014         return code
   72              0.000036       endif
   72              0.000038     endfor
                                return 0

FUNCTION  <SNR>78_hl_group_exists()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 95
Called 333 times
Total time:   0.006327
 Self time:   0.006327

count  total (s)   self (s)
  333              0.002385   if !hlexists(a:group)
                                return 0
  333              0.002720   elseif empty(synIDattr(hlID(a:group), 'fg'))
                                return 0
  333              0.000133   endif
  333              0.000198   return 1

FUNCTION  airline#extensions#tabline#formatters#unique_tail#format()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim line 6
Called 195 times
Total time:   0.104581
 Self time:   0.081142

count  total (s)   self (s)
  195              0.000311   let duplicates = {}
  195              0.000211   let tails = {}
  195              0.000188   let map = {}
 1950              0.001734   for nr in a:buffers
 1755              0.003356     let name = bufname(nr)
 1755              0.002671     if empty(name)
                                  let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, '[No Name]')
 1755              0.000878     else
 1755              0.005744       if name =~ 'term://'
                                    " Neovim Terminal
                                    let tail = substitute(name, '\(term:\)//.*:\(.*\)', '\1 \2', '')
 1755              0.000751       else
 1755              0.010822         let tail = fnamemodify(name, ':s?/\+$??:t')
 1755              0.000965       endif
 1755              0.003253       if has_key(tails, tail)
                                    let duplicates[nr] = nr
 1755              0.000771       endif
 1755              0.003154       let tails[tail] = 1
 1755   0.049331   0.025892       let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, tail)
 1755              0.000839     endif
 1950              0.001497   endfor
                            
  195              0.000676   let fmod = get(g:, 'airline#extensions#tabline#fnamemod', ':p:.')
  195              0.000560   for nr in values(duplicates)
                                let name = bufname(nr)
                                let fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)
                                if fnamecollapse
                                  let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, substitute(fnamemodify(name, fmod), '\v\w\zs.{-}\ze(\\|/)', '', 'g'))
                                else
                                  let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, fnamemodify(name, fmod))
                                endif
  195              0.000275   endfor
                            
  195              0.000414   if has_key(map, a:bufnr)
  195              0.000374     return map[a:bufnr]
                              endif
                            
                              " if we get here, the buffer list isn't in sync with the selected buffer yet, fall back to the default
                              return airline#extensions#tabline#formatters#default#format(a:bufnr, a:buffers)

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 14
Called 145 times
Total time:   0.007931
 Self time:   0.001685

count  total (s)   self (s)
  145   0.007858   0.001611   return airline#extensions#coc#get('error')

FUNCTION  <SNR>40_Autocmd()
    Defined: ~/.config/nvim/plugged/coc.nvim/plugin/coc.vim line 155
Called 34 times
Total time:   0.004856
 Self time:   0.000748

count  total (s)   self (s)
   34              0.000196   if !get(g:,'coc_workspace_initialized', 0)
                                return
   34              0.000031   endif
   34   0.004513   0.000405   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  <SNR>173_HandleLSPResponse()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim line 33
Called 6 times
Total time:   0.004605
 Self time:   0.000110

count  total (s)   self (s)
    6              0.000010   if empty(a:error)
                                " Refer to coc.nvim 79cb11e
                                " No document symbol provider exists when response is null.
    6              0.000008     if a:response isnot v:null
    6   0.004542   0.000048       call s:Extract(a:response)
    6              0.000003     endif
                              else
                                call vista#error#Notify("Error when calling CocActionAsync('documentSymbols'): ".string(a:error))
    6              0.000003   endif

FUNCTION  coc#util#do_autocmd()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim line 769
Called 4 times
Total time:   0.000046
 Self time:   0.000046

count  total (s)   self (s)
    4              0.000034   if exists('#User#'.a:name)
                                exe 'doautocmd User '.a:name
    4              0.000002   endif

FUNCTION  <SNR>50_on_vimleavepre()
    Defined: ~/.config/nvim/plugged/vim-startify/plugin/startify.vim line 52
Called 1 time
Total time:   0.000016
 Self time:   0.000016

count  total (s)   self (s)
    1              0.000009   if get(g:, 'startify_session_persistence') && exists('v:this_session') && filewritable(v:this_session)
                                call startify#session_write(fnameescape(v:this_session))
    1              0.000001   endif

FUNCTION  airline#check_mode()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 199
Called 157 times
Total time:   0.140981
 Self time:   0.021935

count  total (s)   self (s)
  157              0.000569   if !has_key(s:contexts, a:winnr)
                                return ''
  157              0.000150   endif
  157              0.000584   let context = s:contexts[a:winnr]
                            
  157              0.000578   if get(w:, 'airline_active', 1)
  145              0.000505     let l:m = mode(1)
  145              0.000369     if l:m ==# "i"
                                  let l:mode = ['insert']
  145              0.000343     elseif l:m[0] ==# "i"
                                  let l:mode = ['insert']
  145              0.000192     elseif l:m ==# "Rv"
                                  let l:mode =['replace']
  145              0.000204     elseif l:m[0] ==# "R"
                                  let l:mode = ['replace']
  145              0.001598     elseif l:m[0] =~# '\v(v|V||s|S|)'
                                  let l:mode = ['visual']
  145              0.000199     elseif l:m ==# "t"
                                  let l:mode = ['terminal']
  145              0.000199     elseif l:m[0] ==# "c"
    2              0.000005       let l:mode = ['commandline']
  143              0.000215     elseif l:m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
                                  let l:mode = ['normal']
  143              0.000273     elseif l:m[0:1] ==# 'ni'
                                  let l:mode = ['normal']
                                  let l:m = 'ni'
  143              0.000092     else
  143              0.000313       let l:mode = ['normal']
  145              0.000108     endif
  145              0.000785     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let l:m = 'multi'
  145              0.000078     endif
  145              0.001123     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], l:m) == -1
  145              0.000284       let l:m = l:m[0]
  145              0.000077     endif
  145              0.000797     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
   12              0.000007   else
   12              0.000024     let l:mode = ['inactive']
   12              0.000049     let w:airline_current_mode = get(g:airline_mode_map, '__')
  157              0.000093   endif
                            
  157              0.000508   if g:airline_detect_modified && &modified
                                call add(l:mode, 'modified')
  157              0.000081   endif
                            
  157              0.000281   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
  157              0.000082   endif
                            
  157              0.001156   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(l:mode, 'crypt')
  157              0.000078   endif
                            
  157              0.000270   if g:airline_detect_spell && &spell
                                call add(l:mode, 'spell')
  157              0.000070   endif
                            
  157              0.000228   if &readonly || ! &modifiable
                                call add(l:mode, 'readonly')
  157              0.000072   endif
                            
  157              0.000696   let mode_string = join(l:mode)
  157              0.000672   if get(w:, 'airline_lastmode', '') != mode_string
    5   0.001908   0.000082     call airline#highlighter#highlight_modified_inactive(context.bufnr)
    5   0.116531   0.000143     call airline#highlighter#highlight(l:mode, context.bufnr)
    5   0.000872   0.000040     call airline#util#doautocmd('AirlineModeChanged')
    5              0.000015     let w:airline_lastmode = mode_string
  157              0.000082   endif
                            
  157              0.000165   return ''

FUNCTION  airline#util#append()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 49
Called 1015 times
Total time:   0.010998
 Self time:   0.010998

count  total (s)   self (s)
 1015              0.002430   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 1015              0.000462   endif
 1015              0.003356   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
 1015              0.003033   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  <SNR>94_ExcludeOther()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim line 28
Called 54 times
Total time:   0.000476
 Self time:   0.000476

count  total (s)   self (s)
   54              0.000385   if (getbufvar(a:nr, 'current_syntax') == 'qf') ||  (a:exclude_preview && getbufvar(a:nr, '&bufhidden') == 'wipe'  && getbufvar(a:nr, '&buftype') == 'nofile')
   54              0.000062     return 1 | endif

FUNCTION  airline#themes#get_highlight()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/themes.vim line 31
Called 476 times
Total time:   0.081157
 Self time:   0.006177

count  total (s)   self (s)
  476   0.080987   0.006008   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>10_sort_buffers()
    Defined: ~/.config/nvim/plugins/session.vim line 82
Called 106 times
Total time:   0.000943
 Self time:   0.000943

count  total (s)   self (s)
  106              0.000749   let [b1, b2] = map(copy(a:000), 'get(g:fzf#vim#buffers, v:val, v:val)')
                              " Using minus between a float and a number in a sort function causes an error
  106              0.000108   return b1 < b2 ? 1 : -1

FUNCTION  <SNR>173_AutoUpdate()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim line 45
Called 6 times
Total time:   0.000151
 Self time:   0.000098

count  total (s)   self (s)
    6              0.000014   let s:reload_only = v:true
    6   0.000133   0.000080   call vista#AutoUpdateWithDelay(function('CocActionAsync'), ['documentSymbols', function('s:HandleLSPResponse')])

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 10
Called 145 times
Total time:   0.008343
 Self time:   0.001630

count  total (s)   self (s)
  145   0.008259   0.001547   return airline#extensions#coc#get('warning')

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 45
Called 157 times
Total time:   0.007684
 Self time:   0.002209

count  total (s)   self (s)
                              " Shorten text for windows < 81 characters
  157   0.007466   0.001991   return airline#util#shorten(get(g:, 'coc_status', ''), 81, 9)

FUNCTION  <SNR>91_get_accented_line()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 166
Called 180 times
Total time:   0.007868
 Self time:   0.007868

count  total (s)   self (s)
  180              0.000220   if a:self._context.active
                                " active window
  140              0.000175     let contents = []
  140              0.000873     let content_parts = split(a:contents, '__accent')
  291              0.000407     for cpart in content_parts
  151              0.001112       let accent = matchstr(cpart, '_\zs[^#]*\ze')
  151              0.000361       call add(contents, cpart)
  291              0.000261     endfor
  140              0.000457     let line = join(contents, a:group)
  140              0.000800     let line = substitute(line, '__restore__', a:group, 'g')
   40              0.000021   else
                                " inactive window
   40              0.000720     let line = substitute(a:contents, '%#__accent[^#]*#', '', 'g')
   40              0.000244     let line = substitute(line, '%#__restore__#', '', 'g')
  180              0.000083   endif
  180              0.000151   return line

FUNCTION  airline#extensions#tabline#buffers#get()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 51
Called 21 times
Total time:   0.138745
 Self time:   0.001743

count  total (s)   self (s)
   21              0.000023   try
   21   0.006274   0.000208     call <sid>map_keys()
                              catch
                                " no-op
   21              0.000018   endtry
   21              0.000085   let cur = bufnr('%')
   21              0.000070   if cur == s:current_bufnr && &columns == s:column_width
   15              0.000073     if !g:airline_detect_modified || getbufvar(cur, '&modified') == s:current_modified
   15              0.000032       return s:current_tabline
                                endif
    6              0.000003   endif
                            
    6   0.000736   0.000062   let b = airline#extensions#tabline#new_builder()
    6              0.000025   let tab_bufs = tabpagebuflist(tabpagenr())
    6              0.000010   let show_buf_label_first = 0
                            
    6              0.000018   if get(g:, 'airline#extensions#tabline#buf_label_first', 0)
                                let show_buf_label_first = 1
    6              0.000004   endif
    6              0.000007   if show_buf_label_first
                                call airline#extensions#tabline#add_label(b, 'buffers', 0)
    6              0.000003   endif
                            
    6              0.000026   let b.tab_bufs = tabpagebuflist(tabpagenr())
                            
    6              0.000010   let b.overflow_group = 'airline_tabhid'
    6   0.007895   0.000102   let b.buffers = airline#extensions#tabline#buflist#list()
    6              0.000015   if get(g:, 'airline#extensions#tabline#current_first', 0)
                                if index(b.buffers, cur) > -1
                                  call remove(b.buffers, index(b.buffers, cur))
                                endif
                                let b.buffers = [cur] + b.buffers
    6              0.000003   endif
                            
    6              0.000014   function! b.get_group(i) dict
                                let bufnum = get(self.buffers, a:i, -1)
                                if bufnum == -1
                                  return ''
                                endif
                                let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
                                if bufnum == bufnr('%')
                                  let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
                                endif
                                return group
                              endfunction
                            
    6              0.000035   if has("tablineat")
    6              0.000007     function! b.get_pretitle(i) dict
                                  let bufnum = get(self.buffers, a:i, -1)
                                  return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'
                                endfunction
                            
    6              0.000007     function! b.get_posttitle(i) dict
                                  return '%X'
                                endfunction
    6              0.000003   endif
                            
    6              0.000005   function! b.get_title(i) dict
                                let bufnum = get(self.buffers, a:i, -1)
                                let group = self.get_group(a:i)
                                let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
                                if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
                                  let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
                                endif
                            
                                if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
                                else
                                  return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif
                              endfunction
                            
    6              0.000033   let current_buffer = max([index(b.buffers, cur), 0])
    6              0.000016   let last_buffer = len(b.buffers) - 1
    6   0.000150   0.000044   call b.insert_titles(current_buffer, 0, last_buffer)
                            
    6   0.000067   0.000042   call b.add_section('airline_tabfill', '')
    6   0.000042   0.000021   call b.split()
    6   0.000039   0.000022   call b.add_section('airline_tabfill', '')
    6              0.000007   if !show_buf_label_first
    6   0.000265   0.000083     call airline#extensions#tabline#add_label(b, 'buffers', 1)
    6              0.000003   endif
                            
    6   0.000141   0.000044   call airline#extensions#tabline#add_tab_label(b)
                            
    6              0.000009   let s:current_bufnr = cur
    6              0.000012   let s:column_width = &columns
    6   0.122078   0.000059   let s:current_tabline = b.build()
    6              0.000039   let s:current_visible_buffers = copy(b.buffers)
                              " Do not remove from s:current_visible_buffers, this breaks s:select_tab()
                              "if b._right_title <= last_buffer
                              "  call remove(s:current_visible_buffers, b._right_title, last_buffer)
                              "endif
                              "if b._left_title > 0
                              "  call remove(s:current_visible_buffers, 0, b._left_title)
                              "endif
    6              0.000008   return s:current_tabline

FUNCTION  EnsureSession()
    Defined: ~/.config/nvim/plugins/session.vim line 45
Called 8 times
Total time:   0.098494
 Self time:   0.004766

count  total (s)   self (s)
    8              0.000119   if &ft != 'gitcommit' || empty(&ft)
    8   0.003063   0.000139     call DeleteTrashBuffers()
    8   0.004733   0.000097     call s:deleteExtraBuffers()
    8   0.083629   0.000242     call EnsureSessionsDirExists()
    8   0.003019   0.000300     let b:projectname = GetProjectNameFromPath()
    8   0.000246   0.000185     let b:filename = GetSessionNameForProject(b:projectname)
    8              0.003575     exe "mksession! " . b:filename
    8              0.000042   endif

FUNCTION  coc#rpc#ready()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 31
Called 66 times
Total time:   0.000649
 Self time:   0.000649

count  total (s)   self (s)
   66              0.000391   if empty(s:client) || s:client['running'] == 0
                                return 0
   66              0.000035   endif
   66              0.000058   return 1

FUNCTION  coc#util#cursor()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim line 90
Called 6 times
Total time:   0.000274
 Self time:   0.000274

count  total (s)   self (s)
    6              0.000111   let pos = getcurpos()
    6              0.000064   let content = pos[2] == 1 ? '' : getline('.')[0: pos[2] - 2]
    6              0.000076   return [pos[1] - 1, strchars(content)]

FUNCTION  airline#util#stl_disabled()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 185
Called 24 times
Total time:   0.000888
 Self time:   0.000660

count  total (s)   self (s)
                              " setting the statusline is disabled,
                              " either globally, per window, or per buffer
                              " w:airline_disabled is deprecated!
   24   0.000842   0.000614   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline#util#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)

FUNCTION  airline#parts#filetype()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 102
Called 157 times
Total time:   0.003877
 Self time:   0.002343

count  total (s)   self (s)
  157   0.003746   0.002212   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  airline#parts#iminsert()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 82
Called 145 times
Total time:   0.000956
 Self time:   0.000956

count  total (s)   self (s)
  145              0.000372   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
  145              0.000078   endif
  145              0.000105   return ''

FUNCTION  airline#extensions#term#apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/term.vim line 10
Called 7 times
Total time:   0.000136
 Self time:   0.000136

count  total (s)   self (s)
    7              0.000034   if &buftype == 'terminal' || bufname('%')[0] == '!'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.s:section_a.spc)
                                call a:1.add_section('airline_b', '')
                                call a:1.add_section('airline_term', spc.s:termname())
                                call a:1.split()
                                call a:1.add_section('airline_y', '')
                                call a:1.add_section('airline_z', spc.airline#section#create_right(['linenr', 'maxlinenr']))
                                return 1
    7              0.000003   endif

FUNCTION  coc#rpc#async_response()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 115
Called 6 times
Total time:   0.005067
 Self time:   0.000134

count  total (s)   self (s)
    6              0.000030   if empty(s:client)
                                return
    6              0.000004   endif
    6   0.005019   0.000086   call coc#client#on_response(s:name, a:id, a:resp, a:isErr)

FUNCTION  coc#rpc#request()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 92
Called 14 times
Total time:   0.199363
 Self time:   0.000636

count  total (s)   self (s)
   14   0.000457   0.000282   if !coc#rpc#ready()
                                return ''
   14              0.000009   endif
   14   0.198854   0.000303   return s:client['request'](a:method, a:args)

FUNCTION  airline#extensions#coc#get()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim line 18
Called 290 times
Total time:   0.012959
 Self time:   0.012959

count  total (s)   self (s)
  290              0.001019   if !exists(':CocCommand')
                                return ''
  290              0.000138   endif
  290              0.000999   let _backup = get(g:, 'coc_stl_format', '')
  290              0.000704   let is_err = (a:type  is# 'error')
  290              0.000261   if is_err
  145              0.000751     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')
  145              0.000081   else
  145              0.000850     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')
  290              0.000162   endif
  290              0.000940   let info = get(b:, 'coc_diagnostic_info', {})
  290              0.000820   if empty(info) | return '' | endif
                            
                            
  290              0.000837   let cnt = get(info, a:type, 0)
  290              0.000569   if !empty(_backup)
  290              0.000917     let g:coc_stl_format = _backup
  290              0.000147   endif
                            
  290              0.000425   if empty(cnt)
   67              0.000059     return ''
  223              0.000102   else
  223              0.000730     return (is_err ? s:error_symbol : s:warning_symbol).cnt
                              endif

FUNCTION  InitAbbreviations()
    Defined: ~/.config/nvim/plugins/core.vim line 16
Called 48 times
Total time:   5.743701
 Self time:   0.011879

count  total (s)   self (s)
                              " abbreviations
   48   0.972360   0.001583   Abolish! -cmdline co{snt,tsn,tns,nts} co{nst}
   48   0.964922   0.001944   Abolish! -cmdline fun{cton, ctino, ctoin} fun{ction}
   48   0.960231   0.001939   Abolish! -cmdline ret{utn,nurn} ret{urn}
   48   0.946490   0.002062   Abolish! -cmdline f{ro} f{or}
   48   0.960022   0.002132   Abolish! -cmdline aw{ati,tai,tia} aw{ait}
   48   0.939439   0.001982   Abolish! -cmdline len{ght} len{gth}

FUNCTION  <SNR>43_notify()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim line 137
Called 46 times
Total time:   0.003527
 Self time:   0.003212

count  total (s)   self (s)
   46   0.000860   0.000545   let channel = coc#client#get_channel(self)
   46              0.000091   if empty(channel)
                                return ''
   46              0.000018   endif
   46              0.000058   try
   46              0.000034     if s:is_vim
                                  call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
   46              0.000037     else
   46              0.001055       call call('rpcnotify', [channel, a:method] + a:args)
   46              0.000032     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
   46              0.000036   endtry

FUNCTION  airline#extensions#tabline#buflist#list()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim line 35
Called 201 times
Total time:   0.008763
 Self time:   0.006314

count  total (s)   self (s)
  201              0.000604   if exists('s:current_buffer_list')
  195              0.000227     return s:current_buffer_list
    6              0.000004   endif
                            
    6              0.000022   let exclude_buffers = get(g:, 'airline#extensions#tabline#exclude_buffers', [])
    6              0.000019   let exclude_paths = get(g:, 'airline#extensions#tabline#excludes', [])
    6              0.000020   let exclude_preview = get(g:, 'airline#extensions#tabline#exclude_preview', 1)
                            
    6              0.000068   let list = (exists('g:did_bufmru') && g:did_bufmru) ? BufMRUList() : range(1, bufnr("$"))
                            
    6              0.000007   let buffers = []
                              " If this is too slow, we can switch to a different algorithm.
                              " Basically branch 535 already does it, but since it relies on
                              " BufAdd autocommand, I'd like to avoid this if possible.
  234              0.000164   for nr in list
  228              0.000305     if buflisted(nr)
                                  " Do not add to the bufferlist, if either
                                  " 1) bufnr is exclude_buffers list
                                  " 2) buffername matches one of exclude_paths patterns
                                  " 3) buffer is a quickfix buffer
                                  " 4) when excluding preview windows:
                                  "     'bufhidden' == wipe
                                  "     'buftype' == nofile
                                  " 5) ignore buffers matching airline#extensions#tabline#ignore_bufadd_pat
                            
                                  " check buffer numbers first
   54              0.000092       if index(exclude_buffers, nr) >= 0
                                    continue
                                  " check paths second
   54              0.000147       elseif !empty(exclude_paths) && s:ExcludePaths(nr, exclude_paths)
                                    continue
                                  " ignore buffers matching airline#extensions#tabline#ignore_bufadd_pat
   54   0.002526   0.000553       elseif airline#util#ignore_buf(bufname(nr))
                                    continue
                                  " check other types last
   54   0.000985   0.000509       elseif s:ExcludeOther(nr, exclude_preview)
                                    continue
   54              0.000023       endif
                            
   54              0.000104       call add(buffers, nr)
  228              0.000098     endif
  234              0.000118   endfor
                            
    6              0.000011   let s:current_buffer_list = buffers
    6              0.000005   return buffers

FUNCTION  10()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 237
Called 288 times
Total time:   5.689533
 Self time:   1.096734

count  total (s)   self (s)
  288              0.000678   let self.bang = a:bang
  288              0.000424   let self.line1 = a:line1
  288              0.000339   let self.line2 = a:line2
  288              0.000324   let self.count = a:count
  288   5.687351   1.094552   return self.process(a:bang,a:line1,a:line2,a:count,a:args)

FUNCTION  13()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 508
Called 288 times
Total time:   4.592799
 Self time:   4.410099

count  total (s)   self (s)
  288              0.001009   let args = copy(a:args)
  288   0.037701   0.003399   call s:extractopts(a:args,self.options)
  288              0.000344   if self.options.delete
                                let cmd = "unabbrev"
                                let good = ""
  288              0.000150   else
  288              0.000376     let cmd = "noreabbrev"
  288              0.000149   endif
  288              0.000277   if !self.options.cmdline
                                let cmd = "i" . cmd
  288              0.000121   endif
  288              0.000217   if self.options.delete
                                let cmd = "silent! ".cmd
  288              0.000127   endif
  288              0.000202   if self.options.buffer
                                let cmd = cmd . " <buffer>"
  288              0.000102   endif
  288   0.013953   0.003552   let [bad, good] = s:badgood(a:args)
  288              0.004940   if substitute(bad, '[{},]', '', 'g') !~# '^\k*$'
                                call s:throw("E474: Invalid argument (not a keyword: ".string(bad).")")
  288              0.000129   endif
  288              0.000610   if !self.options.delete && good == ""
                                call s:throw("E471: Argument required".a:args[0])
  288              0.000124   endif
  288   0.124901   0.004376   let dict = s:create_dictionary(bad,good,self.options)
  288   0.020993   0.003521   call s:abbreviate_from_dict(cmd,dict)
  288              0.000274   if a:bang
  288              0.000332     let i = 0
  288              0.001500     let str = "Abolish ".join(args," ")
  288              0.000594     let file = g:abolish_save_file
  288              0.011219     if !isdirectory(fnamemodify(file,':h'))
                                  call mkdir(fnamemodify(file,':h'),'p')
  288              0.000173     endif
                            
  288              0.009661     if filereadable(file)
  288              1.221374       let old = readfile(file)
                                else
                                  let old = ["\" Exit if :Abolish isn't available.","if !exists(':Abolish')","    finish","endif",""]
  288              0.000196     endif
  288              3.131023     call writefile(old + [str],file)
  288              0.001428   endif
  288              0.001040   return ""

FUNCTION  19()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 12
Called 6 times
Total time:   0.000082
 Self time:   0.000063

count  total (s)   self (s)
    6              0.000022   let spc = empty(a:contents) ? '' : g:airline_symbols.space
    6   0.000055   0.000037   call self.add_section(a:group, spc.a:contents.spc)

FUNCTION  <SNR>92_build_sections()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim line 35
Called 24 times
Total time:   0.010210
 Self time:   0.001643

count  total (s)   self (s)
  130              0.000178   for key in a:keys
  106              0.000282     if (key == 'warning' || key == 'error') && !a:context.active
   20              0.000014       continue
   86              0.000036     endif
   86   0.009389   0.000823     call s:add_section(a:builder, a:context, key)
  110              0.000092   endfor

FUNCTION  airline#highlighter#add_separator()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 220
Called 118 times
Total time:   0.077660
 Self time:   0.002377

count  total (s)   self (s)
  118              0.000689   let s:separators[a:from.a:to] = [a:from, a:to, a:inverse]
  118   0.076912   0.001629   call <sid>exec_separator({}, a:from, a:to, a:inverse, '')

FUNCTION  <SNR>79_get_hunks_coc()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 47
Called 145 times
Total time:   0.001323
 Self time:   0.001323

count  total (s)   self (s)
  145              0.000603   let hunks = get(b:, 'coc_git_status', '')
  145              0.000371   if empty(hunks)
  145              0.000179     return []
                              endif
                              let result = [0, 0, 0]
                              for val in split(hunks)
                                if val[0] is# '+'
                                 let result[0] = val[1:] + 0
                                elseif val[0] is# '~'
                                 let result[1] = val[1:] + 0
                                elseif val[0] is# '-'
                                  let result[2] = val[1:] + 0
                                endif
                              endfor
                              return result

FUNCTION  <SNR>180_evaluate_tabline()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 209
Called 72 times
Total time:   0.032633
 Self time:   0.005144

count  total (s)   self (s)
   72              0.000108   let tabline = a:tabline
   72   0.029333   0.001844   let tabline = substitute(tabline, '%{\([^}]\+\)}', '\=eval(submatch(1))', 'g')
   72              0.000613   let tabline = substitute(tabline, '%#[^#]\+#', '', 'g')
   72              0.000848   let tabline = substitute(tabline, '%(\([^)]\+\)%)', '\1', 'g')
   72              0.000432   let tabline = substitute(tabline, '%\d\+[TX]', '', 'g')
   72              0.000278   let tabline = substitute(tabline, '%=', '', 'g')
   72              0.000289   let tabline = substitute(tabline, '%\d*\*', '', 'g')
   72              0.000188   if has('tablineat')
   72              0.000294     let tabline = substitute(tabline, '%@[^@]\+@', '', 'g')
   72              0.000037   endif
   72              0.000066   return tabline

FUNCTION  20()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 17
Called 114 times
Total time:   0.000424
 Self time:   0.000424

count  total (s)   self (s)
  114              0.000376   call add(self._sections, [a:group, a:contents])

FUNCTION  22()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 25
Called 48 times
Total time:   0.000177
 Self time:   0.000177

count  total (s)   self (s)
   48              0.000160   call insert(self._sections, [a:group, a:contents], a:position)

FUNCTION  23()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 29
Called 84 times
Total time:   0.000354
 Self time:   0.000354

count  total (s)   self (s)
   84              0.000325   call insert(self._sections, ['', a:text], a:position)

FUNCTION  24()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 33
Called 6 times
Total time:   0.000015
 Self time:   0.000015

count  total (s)   self (s)
    6              0.000012   return len(self._sections)

FUNCTION  25()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 62
Called 29 times
Total time:   0.153682
 Self time:   0.025403

count  total (s)   self (s)
   29              0.000032   let side = 1
   29              0.000027   let line = ''
   29              0.000024   let i = 0
   29              0.000063   let length = len(self._sections)
   29              0.000029   let split = 0
   29              0.000030   let is_empty = 0
   29              0.000032   let prev_group = ''
                            
  322              0.000367   while i < length
  293              0.000499     let section = self._sections[i]
  293              0.000432     let group = section[0]
  293              0.000400     let contents = section[1]
  293              0.000339     let pgroup = prev_group
  293   0.007049   0.003487     let prev_group = airline#builder#get_prev_group(self._sections, i)
  293              0.000594     if group ==# 'airline_c' && &buftype ==# 'terminal' && self._context.active
                                  let group = 'airline_term'
  293              0.000785     elseif group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let group = 'airline_c'. self._context.bufnr
  293              0.000727     elseif prev_group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let prev_group = 'airline_c'. self._context.bufnr
  293              0.000130     endif
  293              0.000199     if is_empty
                                  let prev_group = pgroup
  293              0.000113     endif
  293   0.004973   0.002736     let is_empty = s:section_is_empty(self, contents)
                            
  293              0.000182     if is_empty
                                  " need to fix highlighting groups, since we
                                  " have skipped a section, we actually need
                                  " the previous previous group and so the
                                  " seperator goes from the previous previous group
                                  " to the current group
                                  let pgroup = group
  293              0.000120     endif
                            
  293              0.000326     if group == ''
   84              0.000148       let line .= contents
  209              0.000220     elseif group == '|'
   29              0.000022       let side = 0
   29              0.000054       let line .= contents
   29              0.000021       let split = 1
  180              0.000092     else
  180              0.000207       if prev_group == ''
   29              0.000095         let line .= '%#'.group.'#'
  151              0.000104       elseif split
   29              0.000020         if !is_empty
   29   0.021923   0.000471           let line .= s:get_transitioned_seperator(self, prev_group, group, side)
   29              0.000019         endif
   29              0.000031         let split = 0
  122              0.000055       else
  122              0.000087         if !is_empty
  122   0.094411   0.001251           let line .= s:get_seperator(self, prev_group, group, side)
  122              0.000071         endif
  180              0.000089       endif
  180   0.010231   0.002363       let line .= is_empty ? '' : s:get_accented_line(self, group, contents)
  293              0.000135     endif
                            
  293              0.000328     let i = i + 1
  322              0.000371   endwhile
                            
   29              0.000032   if !self._context.active
                                "let line = substitute(line, '%#airline_c#', '%#airline_c'.self._context.bufnr.'#', '')
   10              0.000628     let line = substitute(line, '%#.\{-}\ze#', '\0_inactive', 'g')
   29              0.000015   endif
   29              0.000029   return line

FUNCTION  <SNR>78_group_not_done()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 25
Called 90 times
Total time:   0.000820
 Self time:   0.000820

count  total (s)   self (s)
   90              0.000338   if index(a:list, a:name) == -1
   90              0.000305     call add(a:list, a:name)
   90              0.000083     return 1
                              else
                                if &vbs
                                  echomsg printf("airline: group: %s already done, skipping", a:name)
                                endif
                                return 0
                              endif

FUNCTION  airline#util#winwidth()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 19
Called 1125 times
Total time:   0.011439
 Self time:   0.011439

count  total (s)   self (s)
 1125              0.003462   let nr = get(a:000, 0, 0)
 1125              0.002683   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
 1125              0.000733   else
 1125              0.002063     return winwidth(nr)
                              endif

FUNCTION  <SNR>27_badgood()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 488
Called 288 times
Total time:   0.010401
 Self time:   0.010401

count  total (s)   self (s)
  288              0.003344   let words = filter(copy(a:args),'v:val !~ "^-"')
  288              0.002109   call filter(a:args,'v:val =~ "^-"')
  288              0.000478   if empty(words)
                                call s:throw("E471: Argument required")
  288              0.000475   elseif !empty(a:args)
                                call s:throw("Unknown argument: ".a:args[0])
  288              0.000123   endif
  288              0.000896   let [bad; words] = words
  288              0.001348   return [bad, join(words," ")]

FUNCTION  <SNR>180_get_separator_change_with_end()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 76
Called 63 times
Total time:   0.014052
 Self time:   0.002563

count  total (s)   self (s)
   63              0.000101   let sep_change = 0
   63              0.000126   if !empty(a:new_end_group) " Separator between title and the end
   54   0.005988   0.000730     let sep_change += airline#builder#should_change_group(a:new_group, a:new_end_group) ? a:sep_size : a:alt_sep_size
   63              0.000031   endif
   63              0.000106   if !empty(a:old_group) " Separator between the title and the one adjacent
   42   0.003809   0.000576     let sep_change += airline#builder#should_change_group(a:new_group, a:old_group) ? a:sep_size : a:alt_sep_size
   42              0.000081     if !empty(a:old_end_group) " Remove mis-predicted separator
   42   0.003402   0.000405       let sep_change -= airline#builder#should_change_group(a:old_group, a:old_end_group) ? a:sep_size : a:alt_sep_size
   42              0.000019     endif
   63              0.000021   endif
   63              0.000056   return sep_change

FUNCTION  airline#util#doautocmd()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 176
Called 5 times
Total time:   0.000832
 Self time:   0.000503

count  total (s)   self (s)
    5   0.000828   0.000500   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  <SNR>92_add_section()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim line 47
Called 86 times
Total time:   0.008567
 Self time:   0.002944

count  total (s)   self (s)
   86              0.000370     let condition = (a:key is# "warning" || a:key is# "error") && (v:version == 704 && !has("patch1511"))
                                " i have no idea why the warning section needs special treatment, but it's
                                " needed to prevent separators from showing up
   86   0.001216   0.000483     if ((a:key == 'error' || a:key == 'warning') && empty(s:get_section(a:context.winnr, a:key)))
                                  return
   86              0.000032     endif
   86              0.000060     if condition
                                  call a:builder.add_raw('%(')
   86              0.000035     endif
   86   0.006206   0.001317     call a:builder.add_section('airline_'.a:key, s:get_section(a:context.winnr, a:key))
   86              0.000070     if condition
                                  call a:builder.add_raw('%)')
   86              0.000037     endif

FUNCTION  <SNR>27_extractopts()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 82
Called 288 times
Total time:   0.034301
 Self time:   0.034301

count  total (s)   self (s)
  288              0.000394   let i = 0
 1248              0.001995   while i < len(a:list)
  960              0.007826     if a:list[i] =~ '^-[^=]' && has_key(a:opts,matchstr(a:list[i],'-\zs[^=]*'))
  288              0.002075       let key   = matchstr(a:list[i],'-\zs[^=]*')
  288              0.001227       let value = matchstr(a:list[i],'=\zs.*')
  288              0.001313       if type(get(a:opts,key)) == type([])
                                    let a:opts[key] += [value]
  288              0.000968       elseif type(get(a:opts,key)) == type(0)
  288              0.000601         let a:opts[key] = 1
                                  else
                                    let a:opts[key] = value
  288              0.000420       endif
  672              0.000267     else
  672              0.000602       let i += 1
  672              0.000411       continue
  288              0.000108     endif
  288              0.000863     call remove(a:list,i)
  576              0.000936   endwhile
  288              0.000323   return a:opts

FUNCTION  40()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 18
Called 6 times
Total time:   0.000106
 Self time:   0.000092

count  total (s)   self (s)
    6              0.000012   let self._first_title = a:first " lowest index
    6              0.000009   let self._last_title = a:last " highest index
    6              0.000009   let self._left_title = a:current " next index to add on the left
    6              0.000009   let self._right_title = a:current + 1 " next index to add on the right
    6   0.000049   0.000034   let self._left_position = self.get_position() " left end of titles
    6              0.000009   let self._right_position = self._left_position " right end of the titles

FUNCTION  41()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 41
Called 48 times
Total time:   0.042560
 Self time:   0.003042

count  total (s)   self (s)
   48   0.006395   0.000305   let title = self.get_title(a:index)
   48   0.033210   0.000612   let title_size = s:tabline_evaluated_length(title) + a:sep_size
   48              0.000092   if a:force || self._remaining_space >= title_size
   42              0.000052     let pos = a:pos
   42              0.000093     if has_key(self, "get_pretitle")
   42   0.001012   0.000508       call self.insert_raw(self.get_pretitle(a:index), pos)
   42              0.000067       let self._right_position += 1
   42              0.000046       let pos += 1
   42              0.000022     endif
                            
   42   0.000370   0.000220     call self.insert_section(a:group, title, pos)
   42              0.000046     let self._right_position += 1
   42              0.000035     let pos += 1
                            
   42              0.000080     if has_key(self, "get_posttitle")
   42   0.000554   0.000376       call self.insert_raw(self.get_posttitle(a:index), pos)
   42              0.000043       let self._right_position += 1
   42              0.000033       let pos += 1
   42              0.000018     endif
                            
   42              0.000060     let self._remaining_space -= title_size
   42              0.000027     return 1
    6              0.000002   endif
    6              0.000004   return 0

FUNCTION  42()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 96
Called 6 times
Total time:   0.122018
 Self time:   0.003837

count  total (s)   self (s)
    6              0.000020   if has_key(self, '_left_position') && self._first_title <= self._last_title
    6   0.015525   0.000093     let self._remaining_space = &columns - s:tabline_evaluated_length(self._build())
                            
    6              0.000020     let center_active = get(g:, 'airline#extensions#tabline#center_active', 0)
                            
    6   0.000391   0.000063     let sep_size = s:tabline_evaluated_length(self._context.left_sep)
    6   0.000337   0.000056     let alt_sep_size = s:tabline_evaluated_length(self._context.left_alt_sep)
                            
    6   0.000152   0.000080     let outer_left_group = airline#builder#get_prev_group(self._sections, self._left_position)
    6   0.000191   0.000073     let outer_right_group = airline#builder#get_next_group(self._sections, self._right_position)
                            
    6              0.000037     let overflow_marker = get(g:, 'airline#extensions#tabline#overflow_marker', g:airline_symbols.ellipsis)
    6   0.000393   0.000048     let overflow_marker_size = s:tabline_evaluated_length(overflow_marker)
                                " Allow space for the markers before we begin filling in titles.
    6              0.000008     if self._left_title > self._first_title
    3   0.000178   0.000033       let self._remaining_space -= overflow_marker_size + s:get_separator_change(self.overflow_group, "", outer_left_group, sep_size, alt_sep_size)
    6              0.000003     endif
    6              0.000007     if self._left_title < self._last_title
    6   0.002377   0.000125       let self._remaining_space -= overflow_marker_size + s:get_separator_change(self.overflow_group, "", outer_right_group, sep_size, alt_sep_size)
    6              0.000003     endif
                            
                                " Add the current title
    6   0.000317   0.000041     let group = self.get_group(self._left_title)
    6              0.000008     if self._left_title == self._first_title
    3   0.000196   0.000058       let sep_change = s:get_separator_change(group, "", outer_left_group, sep_size, alt_sep_size)
    3              0.000001     else
    3   0.001237   0.000044       let sep_change = s:get_separator_change(group, "", self.overflow_group, sep_size, alt_sep_size)
    6              0.000003     endif
    6              0.000009     if self._left_title == self._last_title
                                  let sep_change += s:get_separator_change(group, "", outer_right_group, sep_size, alt_sep_size)
    6              0.000003     else
    6   0.002404   0.000058       let sep_change += s:get_separator_change(group, "", self.overflow_group, sep_size, alt_sep_size)
    6              0.000003     endif
    6              0.000008     let left_group = group
    6              0.000009     let right_group = group
    6   0.005558   0.000056     let self._left_title -= self.try_insert_title(self._left_title, group, self._left_position, sep_change, 1)
                            
    6              0.000015     if get(g:, 'airline#extensions#tabline#current_first', 0)
                                  " always have current title first
                                  let self._left_position += 1
    6              0.000003     endif
                            
    6              0.000011     if !center_active && self._right_title <= self._last_title
                                  " Add the title to the right
    6   0.000331   0.000033       let group = self.get_group(self._right_title)
    6              0.000007       if self._right_title == self._last_title
                                    let sep_change = s:get_separator_change_with_end(group, right_group, outer_right_group, self.overflow_group, sep_size, alt_sep_size) - overflow_marker_size
    6              0.000003       else
    6   0.004738   0.000094         let sep_change = s:get_separator_change(group, right_group, self.overflow_group, sep_size, alt_sep_size)
    6              0.000004       endif
    6              0.000009       let right_group = group
    6   0.005677   0.000054       let self._right_title += self.try_insert_title(self._right_title, group, self._right_position, sep_change, 1)
    6              0.000002     endif
                            
   36              0.000075     while self._remaining_space > 0
   36              0.000037       let done = 0
   36              0.000064       if self._left_title >= self._first_title
                                    " Insert next title to the left
    3   0.000143   0.000016         let group = self.get_group(self._left_title)
    3              0.000004         if self._left_title == self._first_title
    3   0.002145   0.000048           let sep_change = s:get_separator_change_with_end(group, left_group, outer_left_group, self.overflow_group, sep_size, alt_sep_size) - overflow_marker_size
                                    else
                                      let sep_change = s:get_separator_change(group, left_group, self.overflow_group, sep_size, alt_sep_size)
    3              0.000002         endif
    3              0.000006         let left_group = group
    3   0.002814   0.000024         let done = self.try_insert_title(self._left_title, group, self._left_position, sep_change, 0)
    3              0.000004         let self._left_title -= done
   36              0.000016       endif
                                  " If center_active is set, this |if| operates as an independent |if|,
                                  " otherwise as an |elif|.
   36              0.000084       if self._right_title <= self._last_title && (center_active || !done)
                                    " Insert next title to the right
   33   0.001545   0.000193         let group = self.get_group(self._right_title)
   33              0.000039         if self._right_title == self._last_title
                                      let sep_change = s:get_separator_change_with_end(group, right_group, outer_right_group, self.overflow_group, sep_size, alt_sep_size) - overflow_marker_size
   33              0.000017         else
   33   0.002599   0.000344           let sep_change = s:get_separator_change(group, right_group, self.overflow_group, sep_size, alt_sep_size)
   33              0.000017         endif
   33              0.000044         let right_group = group
   33   0.028890   0.000244         let done = self.try_insert_title(self._right_title, group, self._right_position, sep_change, 0)
   33              0.000047         let self._right_title += done
   36              0.000027       endif
   36              0.000027       if !done
    6              0.000004         break
   30              0.000016       endif
   36              0.000044     endwhile
                            
    6              0.000008     if self._left_title >= self._first_title
                                  if get(g:, 'airline#extensions#tabline#current_first', 0)
                                    let self._left_position -= 1
                                  endif
                                  call self.insert_section(self.overflow_group, overflow_marker, self._left_position)
                                  let self._right_position += 1
    6              0.000003     endif
                            
    6              0.000007     if self._right_title <= self._last_title
    6   0.000067   0.000040       call self.insert_section(self.overflow_group, overflow_marker, self._right_position)
    6              0.000003     endif
    6              0.000002   endif
                            
    6   0.041931   0.000037   return self._build()

FUNCTION  airline#extensions#tabline#get_buffer_name()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim line 201
Called 195 times
Total time:   0.113355
 Self time:   0.007804

count  total (s)   self (s)
  195   0.003708   0.002738   let buffers = a:0 ? a:1 : airline#extensions#tabline#buflist#list()
  195              0.000675   let formatter = get(g:, 'airline#extensions#tabline#formatter', 'default')
  195   0.108801   0.004220   return airline#extensions#tabline#formatters#{formatter}#format(a:nr, buffers)

FUNCTION  <SNR>78_CheckDefined()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 132
Called 333 times
Total time:   0.007838
 Self time:   0.007838

count  total (s)   self (s)
                              " Checks, whether the definition of the colors is valid and is not empty or NONE
                              " e.g. if the colors would expand to this:
                              " hi airline_c ctermfg=NONE ctermbg=NONE
                              " that means to clear that highlighting group, therefore, fallback to Normal
                              " highlighting group for the cterm values
                            
                              " This only works, if the Normal highlighting group is actually defined, so
                              " return early, if it has been cleared
  333              0.001065   if !exists("g:airline#highlighter#normal_fg_hi")
                                let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
  333              0.000152   endif
  333              0.001046   if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
                                return a:colors
  333              0.000145   endif
                            
  333              0.000698   for val in a:colors
  333              0.000917     if !empty(val) && val !=# 'NONE'
  333              0.000335       return a:colors
                                endif
                              endfor
                              " this adds the bold attribute to the term argument of the :hi command,
                              " but at least this makes sure, the group will be defined
                              let fg = g:airline#highlighter#normal_fg_hi
                              let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                              if bg < 0
                                " in case there is no background color defined for Normal
                                let bg = a:colors[3]
                              endif
                              return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  airline#extensions#tabline#new_builder()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim line 207
Called 6 times
Total time:   0.000674
 Self time:   0.000322

count  total (s)   self (s)
    6              0.000074   let builder_context = { 'active'        : 1, 'tabline'       : 1, 'right_sep'     : get(g:, 'airline#extensions#tabline#right_sep'    , g:airline_right_sep), 'right_alt_sep' : get(g:, 'airline#extensions#tabline#right_alt_sep', g:airline_right_alt_sep), }
    6              0.000016   if get(g:, 'airline_powerline_fonts', 0)
    6              0.000033     let builder_context.left_sep     = get(g:, 'airline#extensions#tabline#left_sep'     , g:airline_left_sep)
    6              0.000028     let builder_context.left_alt_sep = get(g:, 'airline#extensions#tabline#left_alt_sep' , g:airline_left_alt_sep)
                              else
                                let builder_context.left_sep     = get(g:, 'airline#extensions#tabline#left_sep'     , ' ')
                                let builder_context.left_alt_sep = get(g:, 'airline#extensions#tabline#left_alt_sep' , '|')
    6              0.000003   endif
                            
    6   0.000475   0.000123   return airline#extensions#tabline#builder#new(builder_context)

FUNCTION  airline#mode_changed()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 279
Called 5 times
Total time:   0.000170
 Self time:   0.000126

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
    5              0.000076   let g:airline#visual_active = (mode() =~? '[vs]')
    5   0.000082   0.000038   call airline#update_tabline()

FUNCTION  <SNR>82_ws_refresh()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim line 183
Called 3 times
Total time:   0.000057
 Self time:   0.000057

count  total (s)   self (s)
    3              0.000041   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
    3              0.000007     return
                              endif
                              unlet! b:airline_whitespace_check
                              if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
                              endif
                              let b:airline_ws_changedtick = b:changedtick

FUNCTION  <SNR>195_MarkdownClearSyntaxVariables()
    Defined: ~/.config/nvim/plugged/vim-polyglot/ftplugin/markdown.vim line 778
Called 1 time
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    1              0.000005     if &filetype =~ 'markdown'
                                    unlet! b:mkd_included_filetypes
    1              0.000001     endif

FUNCTION  <SNR>180_tabline_evaluated_length()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 223
Called 72 times
Total time:   0.034158
 Self time:   0.001246

count  total (s)   self (s)
   72   0.034128   0.001216   return airline#util#strchars(s:evaluate_tabline(a:tabline))

FUNCTION  18()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 8
Called 23 times
Total time:   0.000089
 Self time:   0.000089

count  total (s)   self (s)
   23              0.000076   call add(self._sections, ['|', a:0 ? a:1 : '%='])

FUNCTION  vista#AutoUpdateWithDelay()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista.vim line 65
Called 6 times
Total time:   0.000053
 Self time:   0.000053

count  total (s)   self (s)
    6              0.000049   call timer_start(30, { -> call(a:Fn, a:Args) })

FUNCTION  <SNR>87_map_keys()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 198
Called 21 times
Total time:   0.006067
 Self time:   0.006067

count  total (s)   self (s)
   21              0.000094   let bidx_mode = get(g:, 'airline#extensions#tabline#buffer_idx_mode', 1)
   21              0.000024   if bidx_mode > 0
   21              0.000018     if bidx_mode == 1
  210              0.000286       for i in range(1, 9)
  189              0.004454         exe printf('noremap <silent> <Plug>AirlineSelectTab%d :call <SID>select_tab(%d)<CR>', i, i-1)
  210              0.000144       endfor
                                else
                                  let start_idx = bidx_mode == 2 ? 11 : 1
                                  for i in range(start_idx, 99)
                                    exe printf('noremap <silent> <Plug>AirlineSelectTab%02d :call <SID>select_tab(%d)<CR>', i, i-start_idx)
                                  endfor
   21              0.000013     endif
   21              0.000324     noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>
   21              0.000305     noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>
                                " Enable this for debugging
                                " com! AirlineBufferList :echo map(copy(s:current_visible_buffers), {i,k -> k.": ".bufname(k)})
   21              0.000016   endif

FUNCTION  airline#extensions#tabline#add_label()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim line 245
Called 6 times
Total time:   0.000182
 Self time:   0.000100

count  total (s)   self (s)
    6              0.000027   if get(g:, 'airline#extensions#tabline#show_tab_type', 1)
    6   0.000145   0.000063     call a:dict.add_section_spaced('airline_tablabel'. (a:right ? '_right' : ''), get(g:, 'airline#extensions#tabline#'.a:type.'_label', a:type))
    6              0.000003   endif

FUNCTION  <SNR>51_on_cursor_moved()
    Defined: ~/.config/nvim/plugged/vim-airline/plugin/airline.vim line 91
Called 6 times
Total time:   0.000171
 Self time:   0.000131

count  total (s)   self (s)
    6              0.000041   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
    6              0.000003   endif
    6   0.000105   0.000065   call airline#update_tabline()

FUNCTION  414()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 86
Called 24 times
Total time:   0.000986
 Self time:   0.000480

count  total (s)   self (s)
   24              0.000052     let bufnum = get(self.buffers, a:i, -1)
   24              0.000020     if bufnum == -1
                                  return ''
   24              0.000009     endif
   24   0.000755   0.000250     let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
   24              0.000043     if bufnum == bufnr('%')
    3              0.000007       let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
   24              0.000010     endif
   24              0.000016     return group

FUNCTION  airline#extensions#default#apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim line 79
Called 17 times
Total time:   0.012940
 Self time:   0.001238

count  total (s)   self (s)
   17              0.000033   let winnr = a:context.winnr
   17              0.000024   let active = a:context.active
                            
   17   0.000258   0.000196   if airline#util#getwinvar(winnr, 'airline_render_left', active || (!active && !g:airline_inactive_collapse))
    7   0.002153   0.000059     call s:build_sections(a:builder, a:context, s:layout[0])
   10              0.000007   else
   10   0.000756   0.000143     let text = s:get_section(winnr, 'c')
   10              0.000017     if empty(text)
                                  let text = ' %f%m '
   10              0.000005     endif
   10   0.000136   0.000085     call a:builder.add_section('airline_c'.(a:context.bufnr), text)
   17              0.000008   endif
                            
   17   0.000932   0.000210   call a:builder.split(s:get_section(winnr, 'gutter', '', ''))
                            
   17   0.000153   0.000108   if airline#util#getwinvar(winnr, 'airline_render_right', 1)
   17   0.008278   0.000162     call s:build_sections(a:builder, a:context, s:layout[1])
   17              0.000008   endif
                            
   17              0.000011   return 1

FUNCTION  419()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 99
Called 7 times
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    7              0.000027       let bufnum = get(self.buffers, a:i, -1)
    7              0.000021       return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'

FUNCTION  <SNR>27_dispatcher()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 245
Called 288 times
Total time:   5.731822
 Self time:   0.033806

count  total (s)   self (s)
  288              0.001062   let i = 0
  288              0.001468   let args = copy(a:args)
  288              0.000658   let command = s:commands.abbrev
 1248              0.002671   while i < len(args)
  960              0.010842     if args[i] =~# '^-\w\+$' && has_key(s:commands,matchstr(args[i],'-\zs.*'))
                                  let command = s:commands[matchstr(args[i],'-\zs.*')]
                                  call remove(args,i)
                                  break
  960              0.000472     endif
  960              0.001085     let i += 1
 1248              0.001093   endwhile
  288              0.000324   try
  288   5.701462   0.003446     return command.dispatch(a:bang,a:line1,a:line2,a:count,args)
                              catch /^Abolish: /
                                echohl ErrorMsg
                                echo   v:errmsg
                                echohl NONE
                                return ""
  288              0.000431   endtry

FUNCTION  airline#update_tabline()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 273
Called 11 times
Total time:   0.000084
 Self time:   0.000084

count  total (s)   self (s)
   11              0.000035   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
   11              0.000006   endif

FUNCTION  <SNR>40_AsyncRequest()
    Defined: ~/.config/nvim/plugged/coc.nvim/plugin/coc.vim line 62
Called 6 times
Total time:   0.000994
 Self time:   0.000222

count  total (s)   self (s)
    6              0.000038   let Cb = a:args[len(a:args) - 1]
    6              0.000017   if type(Cb) == 2
    6   0.000075   0.000033     if !coc#rpc#ready()
                                  call Cb('service not started', v:null)
    6              0.000004     else
    6   0.000826   0.000096       call coc#rpc#request_async(a:name, a:args[0:-2], Cb)
    6              0.000003     endif
    6              0.000005     return ''
                              endif
                              call coc#rpc#notify(a:name, a:args)
                              return ''

FUNCTION  vista#ShouldIgnore()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista.vim line 25
Called 120 times
Total time:   0.000441
 Self time:   0.000441

count  total (s)   self (s)
  120              0.000399   return exists('g:vista_ignore_kinds') && index(g:vista_ignore_kinds, a:kind) != -1

FUNCTION  <SNR>72_is_excluded_window()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions.vim line 110
Called 17 times
Total time:   0.000858
 Self time:   0.000858

count  total (s)   self (s)
   17              0.000053   for matchft in g:airline_exclude_filetypes
                                if matchft ==# &ft
                                  return 1
                                endif
   17              0.000023   endfor
                            
   68              0.000095   for matchw in g:airline_exclude_filenames
   51              0.000367     if matchstr(expand('%'), matchw) ==# matchw
                                  return 1
   51              0.000020     endif
   68              0.000041   endfor
                            
   17              0.000024   if g:airline_exclude_preview && &previewwindow
                                return 1
   17              0.000007   endif
                            
   17              0.000012   return 0

FUNCTION  airline#util#wrap()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 42
Called 1353 times
Total time:   0.009305
 Self time:   0.008025

count  total (s)   self (s)
 1353   0.005416   0.004136   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 1353              0.000612   endif
 1353              0.001293   return a:text

FUNCTION  <SNR>74_invoke_funcrefs()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 177
Called 17 times
Total time:   0.116004
 Self time:   0.000961

count  total (s)   self (s)
   17   0.000605   0.000135   let builder = airline#builder#new(a:context)
   17   0.017853   0.000241   let err = airline#util#exec_funcrefs(a:funcrefs + s:core_funcrefs, builder, a:context)
   17              0.000015   if err == 1
   17   0.097117   0.000157     let a:context.line = builder.build()
   17              0.000131     let s:contexts[a:context.winnr] = a:context
   17              0.000065     let option = get(g:, 'airline_statusline_ontop', 0) ? '&tabline' : '&statusline'
   17              0.000174     call setwinvar(a:context.winnr, option, '%!airline#statusline('.a:context.winnr.')')
   17              0.000009   endif

FUNCTION  <SNR>173_Extract()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim line 11
Called 6 times
Total time:   0.004494
 Self time:   0.002185

count  total (s)   self (s)
    6              0.000011   let s:data = []
                            
    6              0.000008   if empty(a:symbols)
                                return
    6              0.000003   endif
                            
    6   0.003708   0.001527   call map(a:symbols, 'vista#parser#lsp#CocSymbols(v:val, s:data)')
                            
    6              0.000010   if !empty(s:data)
    6   0.000191   0.000062     let [s:reload_only, s:should_display] = vista#renderer#LSPProcess(s:data, s:reload_only, s:should_display)
                            
                                " Update cache when new data comes.
    6              0.000021     let s:cache = get(s:, 'cache', {})
    6              0.000235     let s:cache[s:fpath] = s:data
    6              0.000243     let s:cache.ftime = getftime(s:fpath)
    6              0.000018     let s:cache.bufnr = bufnr('')
    6              0.000004   endif
                            
    6              0.000005   return s:data

FUNCTION  airline#extensions#term#inactive_apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/term.vim line 24
Called 10 times
Total time:   0.000174
 Self time:   0.000174

count  total (s)   self (s)
   10              0.000039   if getbufvar(a:2.bufnr, '&buftype') == 'terminal'
                                let spc = g:airline_symbols.space
                                call a:1.add_section('airline_a', spc.'TERMINAL'.spc)
                                call a:1.add_section('airline_b', spc.'%f')
                                let neoterm_id = getbufvar(a:2.bufnr, 'neoterm_id')
                                if neoterm_id != ''
                                  call a:1.add_section('airline_c', spc.'neoterm_'.neoterm_id.spc)
                                endif
                                return 1
   10              0.000004   endif

FUNCTION  airline#builder#get_prev_group()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 37
Called 299 times
Total time:   0.003634
 Self time:   0.003634

count  total (s)   self (s)
  299              0.000418   let x = a:i - 1
  448              0.000445   while x >= 0
  407              0.000638     let group = a:sections[x][0]
  407              0.000679     if group != '' && group != '|'
  258              0.000244       return group
  149              0.000062     endif
  149              0.000119     let x = x - 1
  190              0.000149   endwhile
   41              0.000034   return ''

FUNCTION  airline#util#getwinvar()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 82
Called 206 times
Total time:   0.000693
 Self time:   0.000693

count  total (s)   self (s)
  206              0.000615     return getwinvar(a:winnr, a:key, a:def)

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim line 62
Called 145 times
Total time:   0.024563
 Self time:   0.019737

count  total (s)   self (s)
  145              0.000633   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
  145              0.000972   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
  145              0.000071   endif
  145              0.001757   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
  145              0.000515   if !exists('b:airline_whitespace_check')
                                let b:airline_whitespace_check = ''
                                let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
                                let trailing = 0
                                let check = 'trailing'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  try
                                    let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
                                    let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
                                  endtry
                                endif
                            
                                let mixed = 0
                                let check = 'indent'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  let mixed = s:check_mixed_indent()
                                endif
                            
                                let mixed_file = ''
                                let check = 'mixed-indent-file'
                                if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
                                  let mixed_file = s:check_mixed_indent_file()
                                endif
                            
                                let long = 0
                                if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
                                endif
                            
                                let conflicts = 0
                                if index(checks, 'conflicts') > -1
                                  let conflicts = s:conflict_marker()
                                endif
                            
                                if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
                                  let b:airline_whitespace_check = s:symbol
                                  if strlen(s:symbol) > 0
                                    let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
                                  endif
                            
                                  if s:show_message
                                    if trailing != 0
                                      let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
                                      let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
                                    endif
                                    if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
                                    endif
                                    if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
                                    endif
                                    if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
                                    endif
                                    if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
                                    endif
                                  endif
                                endif
  145              0.000075   endif
  145   0.006493   0.001667   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  <SNR>176_OnBufEnter()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim line 16
Called 6 times
Total time:   0.000662
 Self time:   0.000142

count  total (s)   self (s)
    6              0.000025   if !exists('t:vista')
                                return
    6              0.000003   endif
                            
    6   0.000620   0.000100   call s:GenericAutoUpdate(a:bufnr, a:fpath)

FUNCTION  vista#source#Update()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/source.vim line 37
Called 6 times
Total time:   0.000108
 Self time:   0.000108

count  total (s)   self (s)
    6              0.000012   if !exists('t:vista')
                                call vista#init#Api()
    6              0.000002   endif
                            
    6              0.000014   let t:vista.source.bufnr = a:bufnr
    6              0.000008   let t:vista.source.winnr = a:winnr
                            
    6              0.000006   if a:0 == 1
                                let t:vista.source.fname = a:1
    6              0.000006   elseif a:0 == 2
    6              0.000012     let t:vista.source.fname = a:1
    6              0.000009     let t:vista.source.fpath = a:2
    6              0.000003   endif

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 86
Called 145 times
Total time:   0.007062
 Self time:   0.005739

count  total (s)   self (s)
  145              0.000932   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
                                if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
                                elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
                                elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
                                elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
                                elseif s:coc_git_enabled()
                                  let b:source_func = 's:get_hunks_coc'
                                else
                                  let b:source_func = 's:get_hunks_empty'
                                endif
  145              0.000072   endif
  145   0.003214   0.001891   return {b:source_func}()

FUNCTION  airline#extensions#tabline#formatters#default#wrap_name()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim line 38
Called 1755 times
Total time:   0.023439
 Self time:   0.023439

count  total (s)   self (s)
 1755              0.004579   let _ = s:buf_nr_show ? printf(s:buf_nr_format, a:bufnr) : ''
 1755              0.008576   let _ .= substitute(a:buffer_name, '\\', '/', 'g')
                            
 1755              0.004347   if getbufvar(a:bufnr, '&modified') == 1
                                let _ .= s:buf_modified_symbol
 1755              0.000828   endif
 1755              0.001365   return _

FUNCTION  airline#util#prepend()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 63
Called 628 times
Total time:   0.004325
 Self time:   0.004325

count  total (s)   self (s)
  628              0.001417   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  628              0.000275   endif
  628              0.001713   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  <SNR>51_init()
    Defined: ~/.config/nvim/plugged/vim-airline/plugin/airline.vim line 15
Called 7 times
Total time:   0.000022
 Self time:   0.000022

count  total (s)   self (s)
    7              0.000011   if s:airline_initialized
    7              0.000005     return
                              endif
                              let s:airline_initialized = 1
                            
                              call airline#extensions#load()
                              call airline#init#sections()
                            
                              let s:theme_in_vimrc = exists('g:airline_theme')
                              if s:theme_in_vimrc
                                try
                                  if g:airline_theme is# 'random'
                                    let g:airline_theme=s:random_theme()
                                  endif
                                  let palette = g:airline#themes#{g:airline_theme}#palette
                                catch
                                  call airline#util#warning(printf('Could not resolve airline theme "%s". Themes have been migrated to github.com/vim-airline/vim-airline-themes.', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                endtry
                                try
                                  silent call airline#switch_theme(g:airline_theme)
                                catch
                                  call airline#util#warning(printf('Could not find airline theme "%s".', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                  silent call airline#switch_theme(g:airline_theme)
                                endtry
                              else
                                let g:airline_theme = 'dark'
                                silent call s:on_colorscheme_changed()
                              endif
                            
                              call airline#util#doautocmd('AirlineAfterInit')

FUNCTION  <SNR>40_SyncAutocmd()
    Defined: ~/.config/nvim/plugged/coc.nvim/plugin/coc.vim line 162
Called 14 times
Total time:   0.199916
 Self time:   0.000553

count  total (s)   self (s)
   14              0.000085   if !get(g:,'coc_workspace_initialized', 0)
                                return
   14              0.000012   endif
   14              0.000052   if get(g:, 'coc_service_initialized', 0)
   14   0.199608   0.000246     call coc#rpc#request('CocAutocmd', a:000)
                              else
                                call coc#rpc#notify('CocAutocmd', a:000)
   14              0.000014   endif

FUNCTION  <SNR>180_get_separator_change()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 68
Called 60 times
Total time:   0.012972
 Self time:   0.001018

count  total (s)   self (s)
   60   0.012945   0.000991   return s:get_separator_change_with_end(a:new_group, a:old_group, a:end_group, a:end_group, a:sep_size, a:alt_sep_size)

FUNCTION  airline#update_statusline_inactive()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 156
Called 7 times
Total time:   0.048246
 Self time:   0.000693

count  total (s)   self (s)
    7   0.000258   0.000050   if airline#util#stl_disabled(winnr())
                                return
    7              0.000003   endif
   17              0.000031   for nr in a:range
   10   0.000451   0.000072     if airline#util#stl_disabled(nr)
                                  continue
   10              0.000006     endif
   10              0.000035     call setwinvar(nr, 'airline_active', 0)
   10              0.000050     let context = { 'winnr': nr, 'active': 0, 'bufnr': winbufnr(nr) }
   10              0.000023     if get(g:, 'airline_inactive_alt_sep', 0)
                                  call extend(context, { 'left_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_alt_sep }, 'keep')
   10              0.000005     endif
   10   0.047152   0.000187     call s:invoke_funcrefs(context, s:inactive_funcrefs)
   17              0.000028   endfor

FUNCTION  airline#extensions#tabline#get()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim line 149
Called 21 times
Total time:   0.140125
 Self time:   0.001380

count  total (s)   self (s)
   21              0.000216   let show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)
   21              0.000066   let show_tabs = get(g:, 'airline#extensions#tabline#show_tabs', 1)
                            
   21              0.000058   let curtabcnt = tabpagenr('$')
   21              0.000048   if curtabcnt != s:current_tabcnt
                                let s:current_tabcnt = curtabcnt
                                call airline#extensions#tabline#tabs#invalidate()
                                call airline#extensions#tabline#buffers#invalidate()
                                call airline#extensions#tabline#ctrlspace#invalidate()
                                call airline#extensions#tabline#tabws#invalidate()
   21              0.000017   endif
                            
   21              0.000107   if !exists('#airline#BufAdd#*')
                                autocmd airline BufAdd * call <sid>update_tabline(0)
   21              0.000010   endif
   21              0.000083   if !exists('#airline#SessionLoadPost')
                                autocmd airline SessionLoadPost * call <sid>update_tabline(1)
   21              0.000009   endif
   21              0.000020   if s:ctrlspace
                                return airline#extensions#tabline#ctrlspace#get()
   21              0.000026   elseif s:tabws
                                return airline#extensions#tabline#tabws#get()
   21              0.000038   elseif show_buffers && curtabcnt == 1 || !show_tabs
   21   0.139016   0.000272     return airline#extensions#tabline#buffers#get()
                              else
                                return airline#extensions#tabline#tabs#get()
                              endif

FUNCTION  422()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 86
Called 24 times
Total time:   0.001047
 Self time:   0.000570

count  total (s)   self (s)
   24              0.000059     let bufnum = get(self.buffers, a:i, -1)
   24              0.000022     if bufnum == -1
                                  return ''
   24              0.000010     endif
   24   0.000789   0.000312     let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
   24              0.000045     if bufnum == bufnr('%')
    3              0.000010       let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
   24              0.000011     endif
   24              0.000021     return group

FUNCTION  airline#extensions#tabline#group_of_bufnr()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim line 225
Called 144 times
Total time:   0.002996
 Self time:   0.002996

count  total (s)   self (s)
  144              0.000375   let cur = bufnr('%')
  144              0.000174   if cur == a:bufnr
   18              0.000076     if g:airline_detect_modified && getbufvar(a:bufnr, '&modified')
                                  let group = 'airline_tabmod'
   18              0.000010     else
   18              0.000018       let group = 'airline_tabsel'
   18              0.000008     endif
  126              0.000053   else
  126              0.000402     if g:airline_detect_modified && getbufvar(a:bufnr, '&modified')
                                  let group = 'airline_tabmod_unsel'
  126              0.000284     elseif index(a:tab_bufs, a:bufnr) > -1
    9              0.000010       let group = 'airline_tab'
  117              0.000054     else
  117              0.000133       let group = 'airline_tabhid'
  126              0.000065     endif
  144              0.000053   endif
  144              0.000115   return group

FUNCTION  <SNR>43_request()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim line 105
Called 14 times
Total time:   0.198551
 Self time:   0.197824

count  total (s)   self (s)
   14   0.000380   0.000232   let channel = coc#client#get_channel(self)
   14              0.000068   if empty(channel) | return '' | endif
   14              0.000021   try
   14              0.000016     if s:is_vim
                                  let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 30000})
                                  if type(res) == 1 && res ==# ''
                                    throw 'timeout after 30s'
                                  endif
                                  let [l:errmsg, res] =  res
                                  if !empty(l:errmsg)
                                    throw l:errmsg
                                  else
                                    return res
                                  endif
   14              0.000009     endif
   14   0.196888   0.196309     return call('rpcrequest', [channel, a:method] + a:args)
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0) | return | endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
                                endif
   14              0.000031   endtry

FUNCTION  427()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 99
Called 7 times
Total time:   0.000042
 Self time:   0.000042

count  total (s)   self (s)
    7              0.000020       let bufnum = get(self.buffers, a:i, -1)
    7              0.000018       return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'

FUNCTION  429()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 109
Called 8 times
Total time:   0.000952
 Self time:   0.000288

count  total (s)   self (s)
    8              0.000021     let bufnum = get(self.buffers, a:i, -1)
    8   0.000396   0.000041     let group = self.get_group(a:i)
    8   0.000353   0.000044     let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
    8              0.000023     if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
    8              0.000010       let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
    8              0.000003     endif
                            
    8              0.000016     if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
    8              0.000003     else
    8              0.000030       return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif

FUNCTION  <SNR>78_get_syn()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 37
Called 2106 times
Total time:   0.074771
 Self time:   0.074771

count  total (s)   self (s)
 2106              0.005307   if !exists("g:airline_gui_mode")
                                let g:airline_gui_mode = airline#init#gui_mode()
 2106              0.000913   endif
 2106              0.001928   let color = ''
 2106              0.016581   if hlexists(a:group)
 1978              0.019531     let color = synIDattr(synIDtrans(hlID(a:group)), a:what, g:airline_gui_mode)
 2106              0.001057   endif
 2106              0.004384   if empty(color) || color == -1
                                " should always exists
  128              0.002057     let color = synIDattr(synIDtrans(hlID('Normal')), a:what, g:airline_gui_mode)
                                " however, just in case
  128              0.000287     if empty(color) || color == -1
                                  let color = 'NONE'
  128              0.000055     endif
 2106              0.000731   endif
 2106              0.001676   return color

FUNCTION  airline#highlighter#highlight()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 243
Called 5 times
Total time:   0.116388
 Self time:   0.013219

count  total (s)   self (s)
    5              0.000015   let bufnr = a:0 ? a:1 : ''
    5              0.000023   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
    5              0.000046   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
    5              0.000014   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
    5              0.000010   let airline_grouplist = []
    5              0.000043   let buffers_in_tabpage = sort(tabpagebuflist())
    5              0.000016   if exists("*uniq")
    5              0.000024     let buffers_in_tabpage = uniq(buffers_in_tabpage)
    5              0.000003   endif
                              " mapped might be something like ['normal', 'normal_modified']
                              " if a group is in both modes available, only define the second
                              " that is how this was done previously overwrite the previous definition
   10              0.000023   for mode in reverse(mapped)
    5              0.000043     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
    3              0.000014       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
  150              0.000406       for kvp in items(dict)
  147              0.000251         let mode_colors = kvp[1]
  147              0.000255         let name = kvp[0]
  147              0.000360         if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
                                      let name = 'airline_c'.bufnr
  147              0.000074         endif
                                    " do not re-create highlighting for buffers that are no longer visible
                                    " in the current tabpage
  147              0.000967         if name =~# 'airline_c\d\+'
   54              0.000509           let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
   54              0.000152           if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
   51              0.000055             continue
    3              0.000002           endif
   93              0.000463         elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                      " group will be redefined below at exec_separator
                                      " or is not needed for tabline with '_inactive' suffix
                                      " since active flag is 1 for builder)
   66              0.000047           continue
   30              0.000014         endif
   30   0.000762   0.000487         if s:group_not_done(airline_grouplist, name.suffix)
   30   0.009995   0.000396           call airline#highlighter#exec(name.suffix, mode_colors)
   30              0.000021         endif
                            
   30              0.000106         if !has_key(p, 'accents') 
                                      " work around a broken installation
                                      " shouldn't actually happen, p should always contain accents
                                      continue
   30              0.000020         endif
                            
   90              0.000221         for accent in keys(s:accents)
   60              0.000177           if !has_key(p.accents, accent)
                                        continue
   60              0.000034           endif
   60              0.000326           let colors = copy(mode_colors)
   60              0.000162           if p.accents[accent][0] != ''
   30              0.000080             let colors[0] = p.accents[accent][0]
   60              0.000030           endif
   60              0.000118           if p.accents[accent][2] != ''
                                        let colors[2] = p.accents[accent][2]
   60              0.000027           endif
   60              0.000106           if len(colors) >= 5
   60              0.000221             let colors[4] = get(p.accents[accent], 4, '')
                                      else
                                        call add(colors, get(p.accents[accent], 4, ''))
   60              0.000029           endif
   60   0.001311   0.000765           if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
   60   0.018964   0.000854             call airline#highlighter#exec(name.suffix.'_'.accent, colors)
   60              0.000042           endif
   90              0.000066         endfor
   33              0.000018       endfor
                            
    3              0.000005       if empty(s:separators)
                                    " nothing to be done
                                    continue
    3              0.000001       endif
                                  " TODO: optimize this
  123              0.000344       for sep in items(s:separators)
                                    " we cannot check, that the group already exists, else the separators
                                    " might not be correctly defined. But perhaps we can skip above groups
                                    " that match the '_to_' name, because they would be redefined here...
  120   0.076262   0.001621         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
  123              0.000097       endfor
    5              0.000003     endif
   10              0.000051   endfor

FUNCTION  <SNR>64_LocalBrowse()
    Defined: ~/.asdf/installs/neovim/0.4.3/share/nvim/runtime/plugin/netrwPlugin.vim line 102
Called 6 times
Total time:   0.000447
 Self time:   0.000447

count  total (s)   self (s)
                              " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
                              " Otherwise, the BufEnter event gets triggered when attempts to write to
                              " the DBG buffer are made.
                            
    6              0.000015   if !exists("s:vimentered")
                               " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
                               " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
                            "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
                            "   call Dret("s:LocalBrowse")
                               return
    6              0.000002   endif
                            
                            "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
                            
    6              0.000029   if has("amiga")
                               " The check against '' is made for the Amiga, where the empty
                               " string is the current directory and not checking would break
                               " things such as the help command.
                            "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
                               if a:dirname != '' && isdirectory(a:dirname)
                                sil! call netrw#LocalBrowseCheck(a:dirname)
                                if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
                                 exe w:netrw_bannercnt
                                endif
                               endif
                            
    6              0.000240   elseif isdirectory(a:dirname)
                            "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
                            "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
                               sil! call netrw#LocalBrowseCheck(a:dirname)
                               if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
                                exe w:netrw_bannercnt
                               endif
                            
    6              0.000003   else
                               " not a directory, ignore it
                            "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
    6              0.000003   endif
                            
                            "  call Dret("s:LocalBrowse")

FUNCTION  airline#builder#get_next_group()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 49
Called 6 times
Total time:   0.000117
 Self time:   0.000117

count  total (s)   self (s)
    6              0.000008   let x = a:i + 1
    6              0.000011   let l = len(a:sections)
   12              0.000012   while x < l
   12              0.000022     let group = a:sections[x][0]
   12              0.000023     if group != '' && group != '|'
    6              0.000006       return group
    6              0.000003     endif
    6              0.000006     let x = x + 1
    6              0.000004   endwhile
                              return ''

FUNCTION  airline#parts#ffenc()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 108
Called 157 times
Total time:   0.004200
 Self time:   0.004200

count  total (s)   self (s)
  157              0.000694   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
  157              0.000382   let bomb     = &l:bomb ? '[BOM]' : ''
  157              0.001333   let ff       = strlen(&ff) ? '['.&ff.']' : ''
  157              0.000791   if expected is# &fenc.bomb.ff
                                return ''
  157              0.000081   else
  157              0.000524     return &fenc.bomb.ff
                              endif

FUNCTION  airline#util#ignore_buf()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 136
Called 211 times
Total time:   0.009661
 Self time:   0.009661

count  total (s)   self (s)
  211              0.001685   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
  211              0.007737   return match(a:name, pat) > -1

FUNCTION  <SNR>91_get_transitioned_seperator()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 143
Called 118 times
Total time:   0.081956
 Self time:   0.004296

count  total (s)   self (s)
  118              0.000131   let line = ''
  118              0.000468   if get(a:self._context, 'tabline', 0) && get(g:, 'airline#extensions#tabline#alt_sep', 0) && a:group ==# 'airline_tabsel' && a:side
                                call airline#highlighter#add_separator(a:prev_group, a:group, 0)
                                let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
                                let line .=  a:self._context.right_sep.'%#'.a:group.'#'
  118              0.000057   else
  118   0.079085   0.001425     call airline#highlighter#add_separator(a:prev_group, a:group, a:side)
  118              0.000545     let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
  118              0.000415     let line .= a:side ? a:self._context.left_sep : a:self._context.right_sep
  118              0.000297     let line .= '%#'.a:group.'#'
  118              0.000053   endif
  118              0.000107   return line

FUNCTION  airline#extensions#wordcount#formatters#default#update_fmt()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim line 6
Called 7 times
Total time:   0.000077
 Self time:   0.000077

count  total (s)   self (s)
    7              0.000035   let s:fmt = get(g:, 'airline#extensions#wordcount#formatter#default#fmt', '%s words')
    7              0.000035   let s:fmt_short = get(g:, 'airline#extensions#wordcount#formatter#default#fmt_short', s:fmt == '%s words' ? '%sW' : s:fmt)

FUNCTION  coc#rpc#request_async()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 107
Called 6 times
Total time:   0.000730
 Self time:   0.000126

count  total (s)   self (s)
    6   0.000060   0.000030   if !coc#rpc#ready()
                                return cb('coc.nvim service not started.')
    6              0.000003   endif
    6   0.000652   0.000078   call s:client['request_async'](a:method, a:args, a:cb)

FUNCTION  <SNR>10_buflisted()
    Defined: ~/.config/nvim/plugins/session.vim line 79
Called 16 times
Total time:   0.001640
 Self time:   0.001640

count  total (s)   self (s)
   16              0.001591   return filter(range(1, bufnr('$')), 'buflisted(v:val) && getbufvar(v:val, "&filetype") != "qf"')

FUNCTION  CocActionAsync()
    Defined: ~/.config/nvim/plugged/coc.nvim/plugin/coc.vim line 32
Called 6 times
Total time:   0.001051
 Self time:   0.000057

count  total (s)   self (s)
    6   0.001046   0.000052   return s:AsyncRequest('CocAction', a:000)

FUNCTION  airline#parts#get()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 49
Called 145 times
Total time:   0.000737
 Self time:   0.000737

count  total (s)   self (s)
  145              0.000644   return get(s:parts, a:key, {})

FUNCTION  airline#parts#paste()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 63
Called 145 times
Total time:   0.000506
 Self time:   0.000506

count  total (s)   self (s)
  145              0.000429   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  airline#update_statusline()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 127
Called 7 times
Total time:   0.118200
 Self time:   0.000615

count  total (s)   self (s)
    7   0.000357   0.000057   if airline#util#stl_disabled(winnr())
                                return
    7              0.000003   endif
    7              0.000068   let range = filter(range(1, winnr('$')), 'v:val != winnr()')
                              " create inactive statusline
    7   0.048371   0.000125   call airline#update_statusline_inactive(range)
                            
    7              0.000021   unlet! w:airline_render_left w:airline_render_right
    7              0.000096   exe 'unlet! ' 'w:airline_section_'. join(s:sections, ' w:airline_section_')
                            
                              " Now create the active statusline
    7              0.000011   let w:airline_active = 1
    7              0.000041   let context = { 'winnr': winnr(), 'active': 1, 'bufnr': winbufnr(winnr()) }
    7   0.069195   0.000156   call s:invoke_funcrefs(context, g:airline_statusline_funcrefs)

FUNCTION  airline#parts#readonly()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 89
Called 157 times
Total time:   0.011814
 Self time:   0.004127

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
  157   0.010041   0.002353   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
                                return ''
  157              0.000087   endif
  157              0.000514   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
  157              0.000089   else
  157              0.000297     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  airline#builder#should_change_group()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 130
Called 260 times
Total time:   0.041572
 Self time:   0.004434

count  total (s)   self (s)
  260              0.000469   if a:group1 == a:group2
  138              0.000086     return 0
  122              0.000060   endif
  122   0.020838   0.001316   let color1 = airline#highlighter#get_highlight(a:group1)
  122   0.019335   0.001719   let color2 = airline#highlighter#get_highlight(a:group2)
  122              0.000157   if g:airline_gui_mode ==# 'gui'
  122              0.000322     return color1[1] != color2[1] || color1[0] != color2[0]
                              else
                                return color1[3] != color2[3] || color1[2] != color2[2]
                              endif

FUNCTION  <SNR>92_get_section()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim line 20
Called 127 times
Total time:   0.006578
 Self time:   0.005430

count  total (s)   self (s)
  127              0.000336   if has_key(s:section_truncate_width, a:key)
   86   0.001756   0.001038     if airline#util#winwidth(a:winnr) < s:section_truncate_width[a:key]
    3              0.000002       return ''
   83              0.000043     endif
  124              0.000047   endif
  124              0.000194   let spc = g:airline_symbols.space
  124              0.000507   if !exists('g:airline_section_{a:key}')
                                return ''
  124              0.000043   endif
  124   0.001885   0.001455   let text = airline#util#getwinvar(a:winnr, 'airline_section_'.a:key, g:airline_section_{a:key})
  124              0.000822   let [prefix, suffix] = [get(a:000, 0, '%('.spc), get(a:000, 1, spc.'%)')]
  124              0.000443   return empty(text) ? '' : prefix.text.suffix

FUNCTION  vista#sidebar#Reload()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim line 32
Called 6 times
Total time:   0.000065
 Self time:   0.000065

count  total (s)   self (s)
                              " empty(a:data):
                              "   May be triggered by autocmd event sometimes
                              "   e.g., unsupported filetypes for ctags or no related language servers.
                              "
                              " !has_key(t:vista, 'bufnr'):
                              "   May opening a new tab if bufnr does not exist in t:vista.
                              "
                              " t:vista.winnr() == -1:
                              "   vista window is not visible.
    6              0.000033   if empty(a:data) || !has_key(t:vista, 'bufnr') || t:vista.winnr() == -1
    6              0.000004     return
                              endif
                            
                              let rendered = vista#renderer#Render(a:data)
                              call vista#util#SetBufline(t:vista.bufnr, rendered)

FUNCTION  EnsureSessionsDirExists()
    Defined: ~/.config/nvim/plugins/session.vim line 17
Called 8 times
Total time:   0.083387
 Self time:   0.000630

count  total (s)   self (s)
    8   0.083348   0.000592   exe "!mkdir -p ". g:sessionsdir

FUNCTION  airline#highlighter#exec()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 104
Called 333 times
Total time:   0.086029
 Self time:   0.022793

count  total (s)   self (s)
  333              0.000506   if pumvisible()
                                return
  333              0.000140   endif
  333              0.000415   let colors = a:colors
  333              0.000309   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
  333              0.000148   endif
  333   0.053290   0.004219   let old_hi = airline#highlighter#get_highlight(a:group)
  333              0.000684   if len(colors) == 4
  238              0.000512     call add(colors, '')
  333              0.000151   endif
  333              0.000428   if g:airline_gui_mode ==# 'gui'
  333              0.001239     let new_hi = [colors[0], colors[1], '', '', colors[4]]
                              else
                                let new_hi = ['', '', printf("%s", colors[2]), printf("%s", colors[3]), colors[4]]
  333              0.000143   endif
  333   0.011239   0.003401   let colors = s:CheckDefined(colors)
  333   0.009822   0.003496   if old_hi != new_hi || !s:hl_group_exists(a:group)
                                let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
                                exe cmd
                                if has_key(s:hl_groups, a:group)
                                  let s:hl_groups[a:group] = colors
                                endif
  333              0.000115   endif

FUNCTION  <SNR>27_camelcase()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 111
Called 1152 times
Total time:   0.017641
 Self time:   0.017641

count  total (s)   self (s)
 1152              0.005444   let word = substitute(a:word, '-', '_', 'g')
 1152              0.005413   if word !~# '_' && word =~# '\l'
 1152              0.006049     return substitute(word,'^.','\l&','')
                              else
                                return substitute(word,'\C\(_\)\=\(.\)','\=submatch(1)==""?tolower(submatch(2)) : toupper(submatch(2))','g')
                              endif

FUNCTION  coc#util#win_position()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim line 126
Called 3 times
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    3              0.000017   let nr = winnr()
    3              0.000016   let [row, col] = win_screenpos(nr)
    3              0.000016   return [row + winline() - 2, col + wincol() - 2]

FUNCTION  DeleteTrashBuffers()
    Defined: ~/.config/nvim/plugins/session.vim line 94
Called 8 times
Total time:   0.002925
 Self time:   0.000835

count  total (s)   self (s)
    8   0.002263   0.000173   let allBuffers = s:buflisted_sorted()
    8              0.000013   let filteredBuffers = []
   52              0.000059   for buffer in allBuffers
   44              0.000239     if bufname(buffer) =~ "list"
                                  silent exe 'bdel ' . bufname(buffer)
   44              0.000025     else
   44              0.000087       call add(filteredBuffers, buffer)
   44              0.000020     endif
   52              0.000033   endfor
    8              0.000009   return filteredBuffers

FUNCTION  airline#parts#spell()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 67
Called 145 times
Total time:   0.004358
 Self time:   0.004358

count  total (s)   self (s)
  145              0.001975   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
  145              0.000309   if g:airline_detect_spell && &spell
                                let winwidth = airline#util#winwidth()
                                if winwidth >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
  145              0.000066   endif
  145              0.000116   return ''

FUNCTION  vista#cursor#FindNearestMethodOrFunction()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim line 139
Called 6 times
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    6              0.000043   if !exists('t:vista') || !has_key(t:vista, 'functions') || bufnr('') != t:vista.source.bufnr
    6              0.000004     return
                              endif
                            
                              call s:StopFindTimer()
                            
                              if empty(t:vista.functions)
                                call setbufvar(t:vista.source.bufnr, 'vista_nearest_method_or_function', '')
                                return
                              endif
                            
                              let s:find_timer = timer_start( g:vista_find_nearest_method_or_function_delay, function('s:FindNearestMethodOrFunction'), )

FUNCTION  <SNR>91_section_is_empty()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 185
Called 293 times
Total time:   0.002237
 Self time:   0.002237

count  total (s)   self (s)
  293              0.000306   let start=1
                            
                              " do not check for inactive windows or the tabline
  293              0.000349   if a:self._context.active == 0
   50              0.000036     return 0
  243              0.000524   elseif get(a:self._context, 'tabline', 0)
  180              0.000107     return 0
   63              0.000023   endif
                            
                              " only check, if airline#skip_empty_sections == 1
   63              0.000154   if get(g:, 'airline_skip_empty_sections', 0) == 0
   63              0.000040     return 0
                              endif
                            
                              " only check, if airline#skip_empty_sections == 1
                              if get(w:, 'airline_skip_empty_sections', -1) == 0
                                return 0
                              endif
                              " assume accents sections to be never empty
                              " (avoides, that on startup the mode message becomes empty)
                              if match(a:content, '%#__accent_[^#]*#.*__restore__#') > -1
                                return 0
                              endif
                              if empty(a:content)
                                return 1
                              endif
                              let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              if empty(list)
                                return 0 " no function in statusline text
                              endif
                              while len(list) > 0
                                let expr = list[0]
                                try
                                  " catch all exceptions, just in case
                                  if !empty(eval(expr))
                                    return 0
                                  endif
                                catch
                                  return 0
                                endtry
                                let start += 1
                                let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              endw
                              return 1

FUNCTION  407()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 99
Called 7 times
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    7              0.000032       let bufnum = get(self.buffers, a:i, -1)
    7              0.000019       return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'

FUNCTION  408()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 104
Called 7 times
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    7              0.000006       return '%X'

FUNCTION  409()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 109
Called 8 times
Total time:   0.000915
 Self time:   0.000290

count  total (s)   self (s)
    8              0.000020     let bufnum = get(self.buffers, a:i, -1)
    8   0.000390   0.000047     let group = self.get_group(a:i)
    8   0.000331   0.000049     let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
    8              0.000020     if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
    8              0.000009       let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
    8              0.000003     endif
                            
    8              0.000016     if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
    8              0.000003     else
    8              0.000029       return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif

FUNCTION  airline#extensions#tabline#buflist#invalidate()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim line 6
Called 19 times
Total time:   0.000135
 Self time:   0.000135

count  total (s)   self (s)
   19              0.000108   unlet! s:current_buffer_list

FUNCTION  <SNR>176_GenericAutoUpdate()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim line 24
Called 6 times
Total time:   0.000520
 Self time:   0.000193

count  total (s)   self (s)
    6   0.000104   0.000036   if vista#ShouldSkip()
                                return
    6              0.000002   endif
                            
    6              0.000046   let [bufnr, winnr, fname] = [a:bufnr, winnr(), expand('%')]
                            
    6   0.000156   0.000048   call vista#source#Update(bufnr, winnr, fname, a:fpath)
                            
    6   0.000190   0.000039   call s:ApplyAutoUpdate(a:fpath)

FUNCTION  410()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 86
Called 24 times
Total time:   0.000984
 Self time:   0.000528

count  total (s)   self (s)
   24              0.000055     let bufnum = get(self.buffers, a:i, -1)
   24              0.000021     if bufnum == -1
                                  return ''
   24              0.000009     endif
   24   0.000735   0.000279     let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
   24              0.000041     if bufnum == bufnr('%')
    3              0.000008       let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
   24              0.000010     endif
   24              0.000017     return group

FUNCTION  411()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 99
Called 7 times
Total time:   0.000042
 Self time:   0.000042

count  total (s)   self (s)
    7              0.000020       let bufnum = get(self.buffers, a:i, -1)
    7              0.000018       return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'

FUNCTION  412()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 104
Called 7 times
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    7              0.000006       return '%X'

FUNCTION  413()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 109
Called 8 times
Total time:   0.000954
 Self time:   0.000306

count  total (s)   self (s)
    8              0.000021     let bufnum = get(self.buffers, a:i, -1)
    8   0.000407   0.000039     let group = self.get_group(a:i)
    8   0.000335   0.000055     let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
    8              0.000022     if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
    8              0.000010       let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
    8              0.000003     endif
                            
    8              0.000017     if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
    8              0.000003     else
    8              0.000040       return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif

FUNCTION  415()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 99
Called 7 times
Total time:   0.000042
 Self time:   0.000042

count  total (s)   self (s)
    7              0.000021       let bufnum = get(self.buffers, a:i, -1)
    7              0.000018       return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'

FUNCTION  416()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 104
Called 7 times
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    7              0.000006       return '%X'

FUNCTION  417()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 109
Called 8 times
Total time:   0.000930
 Self time:   0.000269

count  total (s)   self (s)
    8              0.000020     let bufnum = get(self.buffers, a:i, -1)
    8   0.000340   0.000037     let group = self.get_group(a:i)
    8   0.000396   0.000038     let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
    8              0.000021     if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
    8              0.000009       let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
    8              0.000003     endif
                            
    8              0.000017     if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
    8              0.000003     else
    8              0.000028       return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif

FUNCTION  418()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 86
Called 24 times
Total time:   0.001261
 Self time:   0.000657

count  total (s)   self (s)
   24              0.000067     let bufnum = get(self.buffers, a:i, -1)
   24              0.000023     if bufnum == -1
                                  return ''
   24              0.000009     endif
   24   0.000968   0.000364     let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
   24              0.000050     if bufnum == bufnr('%')
    3              0.000013       let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
   24              0.000011     endif
   24              0.000018     return group

FUNCTION  <SNR>27_create_dictionary()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 160
Called 288 times
Total time:   0.120525
 Self time:   0.029510

count  total (s)   self (s)
  288              0.000654   let dictionary = {}
  288              0.000281   let i = 0
  288   0.064512   0.005232   let expanded = s:expand_braces({a:lhs : a:rhs})
  864              0.002240   for [lhs,rhs] in items(expanded)
  576              0.001260     if get(a:opts,'case',1)
  576   0.041398   0.009663       let dictionary[s:mixedcase(lhs)] = s:mixedcase(rhs)
  576              0.002351       let dictionary[tolower(lhs)] = tolower(rhs)
  576              0.001971       let dictionary[toupper(lhs)] = toupper(rhs)
  576              0.000341     endif
  576              0.000944     let dictionary[lhs] = rhs
  864              0.000748   endfor
  288              0.000389   let i += 1
  288              0.000275   return dictionary

FUNCTION  airline#parts#crypt()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 59
Called 145 times
Total time:   0.001384
 Self time:   0.001384

count  total (s)   self (s)
  145              0.001298   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  <SNR>78_exec_separator()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 189
Called 238 times
Total time:   0.149924
 Self time:   0.012045

count  total (s)   self (s)
  238              0.000352   if pumvisible()
                                return
  238              0.000088   endif
  238              0.000759   let group = a:from.'_to_'.a:to.a:suffix
  238   0.045631   0.002601   let l:from = airline#themes#get_highlight(a:from.a:suffix)
  238   0.040719   0.002592   let l:to = airline#themes#get_highlight(a:to.a:suffix)
  238              0.000207   if a:inverse
   71              0.000252     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
  167              0.000077   else
  167              0.000608     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
  238              0.000097   endif
  238              0.000748   let a:dict[group] = colors
  238   0.059319   0.002596   call airline#highlighter#exec(group, colors)

FUNCTION  420()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 104
Called 7 times
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    7              0.000006       return '%X'

FUNCTION  421()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 109
Called 8 times
Total time:   0.001301
 Self time:   0.000391

count  total (s)   self (s)
    8              0.000025     let bufnum = get(self.buffers, a:i, -1)
    8   0.000561   0.000049     let group = self.get_group(a:i)
    8   0.000479   0.000081     let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
    8              0.000039     if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
    8              0.000011       let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
    8              0.000004     endif
                            
    8              0.000019     if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
    8              0.000003     else
    8              0.000044       return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif

FUNCTION  423()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 99
Called 7 times
Total time:   0.000045
 Self time:   0.000045

count  total (s)   self (s)
    7              0.000021       let bufnum = get(self.buffers, a:i, -1)
    7              0.000019       return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'

FUNCTION  424()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 104
Called 7 times
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    7              0.000006       return '%X'

FUNCTION  425()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 109
Called 8 times
Total time:   0.001038
 Self time:   0.000321

count  total (s)   self (s)
    8              0.000021     let bufnum = get(self.buffers, a:i, -1)
    8   0.000374   0.000057     let group = self.get_group(a:i)
    8   0.000442   0.000043     let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
    8              0.000032     if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
    8              0.000010       let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
    8              0.000004     endif
                            
    8              0.000018     if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
    8              0.000003     else
    8              0.000032       return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif

FUNCTION  426()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 86
Called 24 times
Total time:   0.001028
 Self time:   0.000548

count  total (s)   self (s)
   24              0.000066     let bufnum = get(self.buffers, a:i, -1)
   24              0.000021     if bufnum == -1
                                  return ''
   24              0.000009     endif
   24   0.000780   0.000299     let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
   24              0.000041     if bufnum == bufnr('%')
    3              0.000008       let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
   24              0.000010     endif
   24              0.000017     return group

FUNCTION  428()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 104
Called 7 times
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    7              0.000006       return '%X'

FUNCTION  <SNR>63_Highlight_Matching_Pair()
    Defined: ~/.asdf/installs/neovim/0.4.3/share/nvim/runtime/plugin/matchparen.vim line 39
Called 6 times
Total time:   0.000570
 Self time:   0.000570

count  total (s)   self (s)
                              " Remove any previous match.
    6              0.000018   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
    6              0.000003   endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
    6              0.000028   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
    6              0.000002   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
    6              0.000017   let c_lnum = line('.')
    6              0.000014   let c_col = col('.')
    6              0.000007   let before = 0
                            
    6              0.000019   let text = getline(c_lnum)
    6              0.000105   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
    6              0.000012   if empty(matches)
                                let [c_before, c] = ['', '']
    6              0.000004   else
    6              0.000028     let [c_before, c] = matches[1:2]
    6              0.000003   endif
    6              0.000127   let plist = split(&matchpairs, '.\zs[:,]')
    6              0.000023   let i = index(plist, c)
    6              0.000007   if i < 0
                                " not found, in Insert mode try character before the cursor
    6              0.000017     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
    6              0.000004     endif
    6              0.000005     if i < 0
                                  " not found, nothing to do
    6              0.000005       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial.
                                let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  airline#parts#mode()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/parts.vim line 55
Called 145 times
Total time:   0.007654
 Self time:   0.002248

count  total (s)   self (s)
  145   0.007553   0.002147   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>91_get_seperator()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 158
Called 122 times
Total time:   0.093160
 Self time:   0.002573

count  total (s)   self (s)
  122   0.031412   0.001328   if airline#builder#should_change_group(a:prev_group, a:group)
   89   0.061512   0.001008     return s:get_transitioned_seperator(a:self, a:prev_group, a:group, a:side)
   33              0.000015   else
   33              0.000067     return a:side ? a:self._context.left_alt_sep : a:self._context.right_alt_sep
                              endif

FUNCTION  <SNR>27_mixedcase()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 107
Called 1152 times
Total time:   0.031735
 Self time:   0.014094

count  total (s)   self (s)
 1152   0.031292   0.013651   return substitute(s:camelcase(a:word),'^.','\u&','')

FUNCTION  airline#extensions#quickfix#apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim line 14
Called 7 times
Total time:   0.000062
 Self time:   0.000062

count  total (s)   self (s)
    7              0.000019   if &buftype == 'quickfix'
                                let w:airline_section_a = airline#extensions#quickfix#get_type()
                                let w:airline_section_b = '%{get(w:, "quickfix_title", "")}'
                                let w:airline_section_c = ''
                                let w:airline_section_x = ''
    7              0.000004   endif

FUNCTION  airline#util#strchars()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 119
Called 72 times
Total time:   0.000279
 Self time:   0.000279

count  total (s)   self (s)
   72              0.000075   if s:has_strchars
   72              0.000152     return strchars(a:str)
                              else
                                return strlen(substitute(a:str, '.', 'a', 'g'))
                              endif

FUNCTION  airline#extensions#wordcount#apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim line 88
Called 7 times
Total time:   0.000330
 Self time:   0.000330

count  total (s)   self (s)
    7              0.000073   let filetypes = get(g:, 'airline#extensions#wordcount#filetypes',  ['asciidoc', 'help', 'mail', 'markdown', 'org', 'rst', 'plaintex', 'tex', 'text'])
                              " export current filetypes settings to global namespace
    7              0.000029   let g:airline#extensions#wordcount#filetypes = filetypes
                            
                              " Check if filetype needs testing
    7              0.000013   if did_filetype()
                                " correctly test for compound filetypes (e.g. markdown.pandoc)
                                let ft = substitute(&filetype, '\.', '\\|', 'g')
                            
                                " Select test based on type of "filetypes": new=list, old=string
                                if type(filetypes) == get(v:, 't_list', type([])) ? match(filetypes, ft) > -1 || index(filetypes, 'all') > -1 : match(&filetype, filetypes) > -1
                                  let b:airline_changedtick = -1
                                  call s:update_wordcount(1) " force update: ensures initial worcount exists
                                elseif exists('b:airline_wordcount') " cleanup when filetype is removed
                                  unlet b:airline_wordcount
                                endif
    7              0.000003   endif
                            
    7              0.000019   if exists('b:airline_wordcount')
                                call airline#extensions#prepend_to_section( 'z', '%{airline#extensions#wordcount#get()}')
    7              0.000003   endif

FUNCTION  406()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim line 86
Called 24 times
Total time:   0.000972
 Self time:   0.000498

count  total (s)   self (s)
   24              0.000054     let bufnum = get(self.buffers, a:i, -1)
   24              0.000021     if bufnum == -1
                                  return ''
   24              0.000009     endif
   24   0.000744   0.000270     let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
   24              0.000040     if bufnum == bufnr('%')
    3              0.000007       let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
   24              0.000009     endif
   24              0.000017     return group

FUNCTION  <SNR>43_request_async()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim line 165
Called 6 times
Total time:   0.000574
 Self time:   0.000223

count  total (s)   self (s)
    6   0.000073   0.000043   let channel = coc#client#get_channel(self)
    6              0.000015   if empty(channel) | return '' | endif
    6              0.000013   if type(a:cb) != 2
                                echohl Error | echom '['.self['name'].'] Callback should be function' | echohl None
                                return
    6              0.000002   endif
    6              0.000010   let id = self.async_req_id
    6              0.000012   let self.async_req_id = id + 1
    6              0.000017   let self.async_callbacks[id] = a:cb
    6   0.000391   0.000071   call self['notify']('nvim_async_request_event', [id, a:method, a:args])

FUNCTION  airline#extensions#tabline#builder#new()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim line 227
Called 6 times
Total time:   0.000352
 Self time:   0.000152

count  total (s)   self (s)
    6   0.000275   0.000075   let builder = airline#builder#new(a:context)
    6              0.000016   let builder._build = builder.build
    6              0.000045   call extend(builder, s:prototype, 'force')
    6              0.000006   return builder

FUNCTION  coc#util#unplace_signs()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim line 506
Called 7 times
Total time:   0.000418
 Self time:   0.000418

count  total (s)   self (s)
    7              0.000101   if !bufloaded(a:bufnr) | return | endif
   28              0.000063   for id in a:sign_ids
   21              0.000181     execute 'silent! sign unplace '.id.' buffer='.a:bufnr
   28              0.000032   endfor

FUNCTION  airline#statusline()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline.vim line 190
Called 157 times
Total time:   0.003349
 Self time:   0.003349

count  total (s)   self (s)
  157              0.001654   if has_key(s:contexts, a:winnr)
  157              0.001366     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  vista#renderer#LSPProcess()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/renderer.vim line 108
Called 6 times
Total time:   0.000129
 Self time:   0.000063

count  total (s)   self (s)
    6              0.000006   if a:reload_only
    6   0.000104   0.000039     call vista#sidebar#Reload(a:processed_data)
    6              0.000013     return [v:false, a:should_display]
                              elseif a:should_display
                                call vista#renderer#RenderAndDisplay(a:processed_data)
                                return [a:reload_only, v:false]
                              else
                                return [a:reload_only, a:should_display]
                              endif

FUNCTION  vista#ShouldSkip()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista.vim line 18
Called 6 times
Total time:   0.000068
 Self time:   0.000068

count  total (s)   self (s)
    6              0.000062   return !empty(&buftype) || empty(&filetype) || index(s:ignore_list, &filetype) > -1

FUNCTION  airline#extensions#apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions.vim line 70
Called 17 times
Total time:   0.001953
 Self time:   0.001095

count  total (s)   self (s)
   17              0.000071   let filetype_overrides = get(s:, 'filetype_overrides', {})
   17              0.000114   call extend(filetype_overrides, get(g:, 'airline_filetype_overrides', {}), 'force')
                            
   17   0.001003   0.000145   if s:is_excluded_window()
                                return -1
   17              0.000006   endif
                            
   17              0.000029   if &buftype == 'terminal'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
   17              0.000007   endif
                            
   17              0.000052   if &previewwindow && empty(get(w:, 'airline_section_a', ''))
                                let w:airline_section_a = 'Preview'
                                let w:airline_section_b = ''
                                let w:airline_section_c = bufname(winbufnr(winnr()))
   17              0.000007   endif
                            
   17              0.000100   if has_key(filetype_overrides, &ft) && ((&filetype == 'help' && &buftype == 'help') || &filetype !~ 'help')
                                " for help files only override it, if the buftype is also of type 'help',
                                " else it would trigger when editing Vim help files
                                let args = filetype_overrides[&ft]
                                call airline#extensions#apply_left_override(args[0], args[1])
   17              0.000007   endif
                            
   17              0.000021   if &buftype == 'help'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
                                let w:airline_render_right = 1
   17              0.000014   endif
                            
   17              0.000063   for item in items(s:filetype_regex_overrides)
                                if match(&ft, item[0]) >= 0
                                  call airline#extensions#apply_left_override(item[1][0], item[1][1])
                                endif
   17              0.000019   endfor

FUNCTION  GetSessionNameForProject()
    Defined: ~/.config/nvim/plugins/session.vim line 40
Called 8 times
Total time:   0.000060
 Self time:   0.000060

count  total (s)   self (s)
    8              0.000042   return g:sessionsdir . a:projectname . '.vim'

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 67
Called 1053 times
Total time:   0.161189
 Self time:   0.077786

count  total (s)   self (s)
 1053              0.019413   let reverse = get(g:, 'airline_gui_mode', '') ==# 'gui' ? synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'gui') : synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')|| synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'term')
 1053              0.003600   if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                let res = s:hl_groups[a:group]
                                return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
 1053              0.000531   else
 1053   0.047808   0.009298     let fg = s:get_syn(a:group, 'fg')
 1053   0.045498   0.009237     let bg = s:get_syn(a:group, 'bg')
 1053              0.009891     let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
 1053              0.000953     if reverse
                                  let res = s:get_array(bg, fg, bold ? ['bold'] : a:000)
 1053              0.000567     else
 1053   0.018391   0.009760       let res = s:get_array(fg, bg, bold ? ['bold'] : a:000)
 1053              0.000507     endif
 1053              0.000373   endif
 1053              0.004219   let s:hl_groups[a:group] = res
 1053              0.000762   return res

FUNCTION  airline#util#shorten()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 28
Called 447 times
Total time:   0.015707
 Self time:   0.010835

count  total (s)   self (s)
  447   0.010487   0.005615   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
  447              0.000237   else
  447              0.000477     return a:text
                              endif

FUNCTION  <SNR>27_abbreviate_from_dict()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 500
Called 288 times
Total time:   0.017473
 Self time:   0.017473

count  total (s)   self (s)
 2016              0.004661   for [lhs,rhs] in items(a:dict)
 1728              0.010764     exe a:cmd lhs rhs
 2016              0.001220   endfor

FUNCTION  <SNR>10_buflisted_sorted()
    Defined: ~/.config/nvim/plugins/session.vim line 87
Called 16 times
Total time:   0.003646
 Self time:   0.001063

count  total (s)   self (s)
   16   0.003618   0.001036   return sort(s:buflisted(), 's:sort_buffers')

FUNCTION  coc#util#set_buf_var()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim line 921
Called 7 times
Total time:   0.000150
 Self time:   0.000150

count  total (s)   self (s)
    7              0.000049   if !bufloaded(a:bufnr) | return | endif
    7              0.000091   call setbufvar(a:bufnr, a:name, a:val)

FUNCTION  coc#client#on_response()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim line 251
Called 6 times
Total time:   0.004933
 Self time:   0.000115

count  total (s)   self (s)
    6              0.000029   let client = get(s:clients, a:name, v:null)
    6              0.000009   if !empty(client)
    6   0.004882   0.000064     call client['on_async_response'](a:id, a:resp, a:isErr)
    6              0.000003   endif

FUNCTION  vista#parser#lsp#CocSymbols()
    Defined: ~/.config/nvim/plugged/vista.vim/autoload/vista/parser/lsp.vim line 80
Called 120 times
Total time:   0.002181
 Self time:   0.001740

count  total (s)   self (s)
  120   0.001280   0.000839   if vista#ShouldIgnore(a:symbol.kind)
                                return
  120              0.000046   endif
                            
  120              0.000667   call add(a:container, { 'lnum': a:symbol.lnum, 'col': a:symbol.col, 'text': a:symbol.text, 'kind': a:symbol.kind, 'level': a:symbol.level })

FUNCTION  <SNR>51_on_window_changed()
    Defined: ~/.config/nvim/plugged/vim-airline/plugin/airline.vim line 59
Called 19 times
Total time:   0.119829
 Self time:   0.001606

count  total (s)   self (s)
                              " don't trigger for Vim popup windows
   19              0.000131   if &buftype is# 'popup'
                                return
   19              0.000013   endif
                            
   19              0.000090   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
                                " do not trigger for previewwindows
                                return
   19              0.000013   endif
   19              0.000104   let s:active_winnr = winnr()
                              " Handle each window only once, since we might come here several times for
                              " different autocommands.
   19              0.000364   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
   19              0.000468   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
                                " fugitive is special, it changes names and filetypes several times,
                                " make sure the caching does not get into its way
   12              0.000021     return
    7              0.000003   endif
    7              0.000042   let g:airline_last_window_changed = l:key
    7   0.000072   0.000050   call s:init()
    7   0.118258   0.000058   call airline#update_statusline()

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 229
Called 5 times
Total time:   0.001826
 Self time:   0.000229

count  total (s)   self (s)
    5              0.000027   if getbufvar(a:bufnr, '&modified')
                                let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
    5              0.000004   else
    5              0.000063     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
    5              0.000003   endif
                            
    5              0.000012   if !empty(colors)
    5   0.001673   0.000076     call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
    5              0.000003   endif

FUNCTION  airline#extensions#keymap#status()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/keymap.vim line 10
Called 145 times
Total time:   0.001974
 Self time:   0.001974

count  total (s)   self (s)
  145              0.000943   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
  145              0.000892     return printf('%s', (!empty(&keymap) ? (g:airline_symbols.keymap . ' '. &keymap) : ''))
                              else
                                return ''
                              endif

FUNCTION  coc#rpc#notify()
    Defined: ~/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim line 99
Called 40 times
Total time:   0.004637
 Self time:   0.001028

count  total (s)   self (s)
   40   0.000752   0.000351   if !coc#rpc#ready()
                                return ''
   40              0.000045   endif
   40   0.003677   0.000470   call s:client['notify'](a:method, a:args)
   40              0.000039   return ''

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim line 105
Called 145 times
Total time:   0.024910
 Self time:   0.014077

count  total (s)   self (s)
  145              0.000553   if !get(w:, 'airline_active', 0)
                                return ''
  145              0.000076   endif
                              " Cache values, so that it isn't called too often
  145   0.005764   0.004192   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
  145              0.000078   endif
  145   0.009106   0.002044   let hunks = airline#extensions#hunks#get_raw_hunks()
  145              0.000199   let string = ''
  145   0.002237   0.001500   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
  145              0.000297   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
                                for i in [0, 1, 2]
                                  if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
                                    let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
                                  endif
                                endfor
  145              0.000083   endif
  145              0.000320   let b:airline_hunks = string
  145              0.000285   let b:airline_changenr = b:changedtick
  145   0.002841   0.001379   let s:airline_winwidth = airline#util#winwidth()
  145              0.000157   return string

FUNCTION  airline#extensions#netrw#apply()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/netrw.vim line 11
Called 7 times
Total time:   0.000141
 Self time:   0.000141

count  total (s)   self (s)
    7              0.000030   if &ft == 'netrw'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.'netrw'.spc)
                                if exists('*airline#extensions#branch#get_head')
                                  call a:1.add_section('airline_b', spc.'%{airline#extensions#branch#get_head()}'.spc)
                                endif
                                call a:1.add_section('airline_c', spc.'%f'.spc)
                                call a:1.split()
                                call a:1.add_section('airline_y', spc.'%{airline#extensions#netrw#sortstring()}'.spc)
                                return 1
    7              0.000003   endif

FUNCTION  AutoPairsTryInit()
    Defined: ~/.config/nvim/plugged/auto-pairs/plugin/auto-pairs.vim line 603
Called 6 times
Total time:   0.000049
 Self time:   0.000049

count  total (s)   self (s)
    6              0.000036   if exists('b:autopairs_loaded')
    6              0.000006     return
                              end
                            
                              " for auto-pairs starts with 'a', so the priority is higher than supertab and vim-endwise
                              "
                              " vim-endwise doesn't support <Plug>AutoPairsReturn
                              " when use <Plug>AutoPairsReturn will cause <Plug> isn't expanded
                              "
                              " supertab doesn't support <SID>AutoPairsReturn
                              " when use <SID>AutoPairsReturn  will cause Duplicated <CR>
                              "
                              " and when load after vim-endwise will cause unexpected endwise inserted.
                              " so always load AutoPairs at last
                            
                              " Buffer level keys mapping
                              " comptible with other plugin
                              if g:AutoPairsMapCR
                                if v:version == 703 && has('patch32') || v:version > 703
                                  " VIM 7.3 supports advancer maparg which could get <expr> info
                                  " then auto-pairs could remap <CR> in any case.
                                  let info = maparg('<CR>', 'i', 0, 1)
                                  if empty(info)
                                    let old_cr = '<CR>'
                                    let is_expr = 0
                                  else
                                    let old_cr = info['rhs']
                                    let old_cr = s:ExpandMap(old_cr)
                                    let old_cr = substitute(old_cr, '<SID>', '<SNR>' . info['sid'] . '_', 'g')
                                    let is_expr = info['expr']
                                    let wrapper_name = '<SID>AutoPairsOldCRWrapper73'
                                  endif
                                else
                                  " VIM version less than 7.3
                                  " the mapping's <expr> info is lost, so guess it is expr or not, it's
                                  " not accurate.
                                  let old_cr = maparg('<CR>', 'i')
                                  if old_cr == ''
                                    let old_cr = '<CR>'
                                    let is_expr = 0
                                  else
                                    let old_cr = s:ExpandMap(old_cr)
                                    " old_cr contain (, I guess the old cr is in expr mode
                                    let is_expr = old_cr =~ '\V(' && toupper(old_cr) !~ '\V<C-R>'
                            
                                    " The old_cr start with " it must be in expr mode
                                    let is_expr = is_expr || old_cr =~ '\v^"'
                                    let wrapper_name = '<SID>AutoPairsOldCRWrapper'
                                  end
                                end
                            
                                if old_cr !~ 'AutoPairsReturn'
                                  if is_expr
                                    " remap <expr> to `name` to avoid mix expr and non-expr mode
                                    execute 'inoremap <buffer> <expr> <script> '. wrapper_name . ' ' . old_cr
                                    let old_cr = wrapper_name
                                  end
                                  " Always silent mapping
                                  execute 'inoremap <script> <buffer> <silent> <CR> '.old_cr.'<SID>AutoPairsReturn'
                                end
                              endif
                              call AutoPairsInit()

FUNCTION  <SNR>27_expand_braces()
    Defined: ~/.config/nvim/plugged/vim-abolish/plugin/abolish.vim line 176
Called 528 times
Total time:   0.080635
 Self time:   0.059280

count  total (s)   self (s)
  528              0.000874   let new_dict = {}
 1344              0.003941   for [key,val] in items(a:dict)
  816              0.003156     if key =~ '{.*}'
  240              0.000281       let redo = 1
  240              0.005626       let [all,kbefore,kmiddle,kafter;crap] = matchlist(key,'\(.\{-\}\){\(.\{-\}\)}\(.*\)')
  240              0.005815       let [all,vbefore,vmiddle,vafter;crap] = matchlist(val,'\(.\{-\}\){\(.\{-\}\)}\(.*\)') + ["","","",""]
  240              0.000368       if all == ""
                                    let [vbefore,vmiddle,vafter] = [val, ",", ""]
  240              0.000160       endif
  240              0.001384       let targets      = split(kmiddle,',',1)
  240              0.000993       let replacements = split(vmiddle,',',1)
  240              0.000675       if replacements == [""]
                                    let replacements = targets
  240              0.000103       endif
  768              0.001577       for i in range(0,len(targets)-1)
  528              0.003266         let new_dict[kbefore.targets[i].kafter] = vbefore.replacements[i%len(replacements)].vafter
  768              0.000482       endfor
  576              0.000271     else
  576              0.001090       let new_dict[key] = val
  816              0.000387     endif
 1344              0.001792   endfor
  528              0.001157   if exists("redo")
  240              0.001047     return s:expand_braces(new_dict)
  288              0.000160   else
  288              0.000311     return new_dict
                              endif

FUNCTION  airline#util#getbufvar()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/util.vim line 71
Called 24 times
Total time:   0.000072
 Self time:   0.000072

count  total (s)   self (s)
   24              0.000064     return getbufvar(a:bufnr, a:key, a:def)

FUNCTION  <SNR>78_get_array()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/highlighter.vim line 56
Called 1053 times
Total time:   0.008631
 Self time:   0.008631

count  total (s)   self (s)
 1053              0.003518   let opts=empty(a:opts) ? '' : join(a:opts, ',')
 1053              0.004499   return g:airline_gui_mode ==# 'gui' ? [ a:fg, a:bg, '', '', opts ] : [ '', '', a:fg, a:bg, opts ]

FUNCTION  airline#extensions#tabline#add_tab_label()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/extensions/tabline.vim line 253
Called 6 times
Total time:   0.000097
 Self time:   0.000097

count  total (s)   self (s)
    6              0.000019   let show_tab_count = get(g:, 'airline#extensions#tabline#show_tab_count', 1)
    6              0.000007   if show_tab_count == 2
                                call a:dict.add_section_spaced('airline_tabmod', printf('%s %d/%d', "tab", tabpagenr(), tabpagenr('$')))
    6              0.000015   elseif show_tab_count == 1 && tabpagenr('$') > 1
                                call a:dict.add_section_spaced('airline_tabmod', printf('%s %d/%d', "tab", tabpagenr(), tabpagenr('$')))
    6              0.000003   endif

FUNCTION  airline#builder#new()
    Defined: ~/.config/nvim/plugged/vim-airline/autoload/airline/builder.vim line 232
Called 23 times
Total time:   0.000670
 Self time:   0.000670

count  total (s)   self (s)
   23              0.000175   let builder = copy(s:prototype)
   23              0.000049   let builder._context = a:context
   23              0.000039   let builder._sections = []
                            
   23              0.000333   call extend(builder._context, { 'left_sep': g:airline_left_sep, 'left_alt_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_sep, 'right_alt_sep': g:airline_right_alt_sep, }, 'keep')
   23              0.000025   return builder

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   48   5.743701   0.011879  InitAbbreviations()
  288   5.731822   0.033806  <SNR>27_dispatcher()
  288   5.698016   0.005741  9()
  288   5.689533   1.096734  10()
  288   4.592799   4.410099  13()
   14   0.199916   0.000553  <SNR>40_SyncAutocmd()
   14   0.199363   0.000636  coc#rpc#request()
   14   0.198551   0.197824  <SNR>43_request()
 1053   0.161189   0.077786  airline#highlighter#get_highlight()
   29   0.153682   0.025403  25()
  238   0.149924   0.012045  <SNR>78_exec_separator()
  157   0.140981   0.021935  airline#check_mode()
   21   0.140125   0.001380  airline#extensions#tabline#get()
   21   0.138745   0.001743  airline#extensions#tabline#buffers#get()
    6   0.122018   0.003837  42()
  288   0.120525   0.029510  <SNR>27_create_dictionary()
   19   0.119829   0.001606  <SNR>51_on_window_changed()
    7   0.118200   0.000615  airline#update_statusline()
    5   0.116388   0.013219  airline#highlighter#highlight()
   17   0.116004   0.000961  <SNR>74_invoke_funcrefs()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  288   4.592799   4.410099  13()
  288   5.689533   1.096734  10()
   14   0.198551   0.197824  <SNR>43_request()
  195   0.104581   0.081142  airline#extensions#tabline#formatters#unique_tail#format()
 1053   0.161189   0.077786  airline#highlighter#get_highlight()
 2106              0.074771  <SNR>78_get_syn()
  528   0.080635   0.059280  <SNR>27_expand_braces()
  288              0.034301  <SNR>27_extractopts()
  288   5.731822   0.033806  <SNR>27_dispatcher()
  288   0.120525   0.029510  <SNR>27_create_dictionary()
   29   0.153682   0.025403  25()
 1755              0.023439  airline#extensions#tabline#formatters#default#wrap_name()
  333   0.086029   0.022793  airline#highlighter#exec()
  157   0.140981   0.021935  airline#check_mode()
  145   0.024563   0.019737  airline#extensions#whitespace#check()
 1152              0.017641  <SNR>27_camelcase()
  288              0.017473  <SNR>27_abbreviate_from_dict()
 1152   0.031735   0.014094  <SNR>27_mixedcase()
  145   0.024910   0.014077  airline#extensions#hunks#get_hunks()
    5   0.116388   0.013219  airline#highlighter#highlight()

